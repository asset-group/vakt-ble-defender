import sys;sys.path.insert ( 0, "bin" ) 
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_wdissector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_wdissector')
    _wdissector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wdissector', [dirname(__file__)])
        except ImportError:
            import _wdissector
            return _wdissector
        try:
            _mod = imp.load_module('_wdissector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _wdissector = swig_import_helper()
    del swig_import_helper
else:
    import _wdissector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wdissector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _wdissector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _wdissector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _wdissector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _wdissector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _wdissector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _wdissector.SwigPyIterator_copy(self)

    def next(self):
        return _wdissector.SwigPyIterator_next(self)

    def __next__(self):
        return _wdissector.SwigPyIterator___next__(self)

    def previous(self):
        return _wdissector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _wdissector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _wdissector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _wdissector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _wdissector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _wdissector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _wdissector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _wdissector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _wdissector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def cdata(ptr, nelements=1):
    return _wdissector.cdata(ptr, nelements)
cdata = _wdissector.cdata

def memmove(data, indata):
    return _wdissector.memmove(data, indata)
memmove = _wdissector.memmove
class byteArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, byteArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, byteArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _wdissector.new_byteArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_byteArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _wdissector.byteArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _wdissector.byteArray___setitem__(self, index, value)

    def cast(self):
        return _wdissector.byteArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_wdissector.byteArray_frompointer)
    else:
        frompointer = _wdissector.byteArray_frompointer
byteArray_swigregister = _wdissector.byteArray_swigregister
byteArray_swigregister(byteArray)

def byteArray_frompointer(t):
    return _wdissector.byteArray_frompointer(t)
byteArray_frompointer = _wdissector.byteArray_frompointer

WD_TYPE_FIELD = _wdissector.WD_TYPE_FIELD
WD_TYPE_GROUP = _wdissector.WD_TYPE_GROUP
WD_TYPE_LAYER = _wdissector.WD_TYPE_LAYER
WD_DIR_TX = _wdissector.WD_DIR_TX
WD_DIR_RX = _wdissector.WD_DIR_RX
WD_DIR_DL = _wdissector.WD_DIR_DL
WD_DIR_UL = _wdissector.WD_DIR_UL
WD_DIR_SENT = _wdissector.WD_DIR_SENT
WD_DIR_RECV = _wdissector.WD_DIR_RECV
WD_DIR_ANY = _wdissector.WD_DIR_ANY
WD_0 = _wdissector.WD_0
WD_1 = _wdissector.WD_1
WD_2 = _wdissector.WD_2
WD_3 = _wdissector.WD_3
WD_4 = _wdissector.WD_4
WD_5 = _wdissector.WD_5
WD_6 = _wdissector.WD_6
WD_7 = _wdissector.WD_7
WD_8 = _wdissector.WD_8
WD_9 = _wdissector.WD_9
WD_10 = _wdissector.WD_10
WD_11 = _wdissector.WD_11
WD_12 = _wdissector.WD_12
WD_13 = _wdissector.WD_13
WD_14 = _wdissector.WD_14
WD_15 = _wdissector.WD_15
WD_LOG_LEVEL_NONE = _wdissector.WD_LOG_LEVEL_NONE
WD_LOG_LEVEL_NOISY = _wdissector.WD_LOG_LEVEL_NOISY
WD_LOG_LEVEL_DEBUG = _wdissector.WD_LOG_LEVEL_DEBUG
WD_LOG_LEVEL_INFO = _wdissector.WD_LOG_LEVEL_INFO
WD_LOG_LEVEL_MESSAGE = _wdissector.WD_LOG_LEVEL_MESSAGE
WD_LOG_LEVEL_WARNING = _wdissector.WD_LOG_LEVEL_WARNING
WD_LOG_LEVEL_CRITICAL = _wdissector.WD_LOG_LEVEL_CRITICAL
WD_LOG_LEVEL_ERROR = _wdissector.WD_LOG_LEVEL_ERROR
WD_LOG_LEVEL_ECHO = _wdissector.WD_LOG_LEVEL_ECHO
WD_LOG_LEVEL_LAST = _wdissector.WD_LOG_LEVEL_LAST
WD_MODE_NORMAL = _wdissector.WD_MODE_NORMAL
WD_MODE_FAST = _wdissector.WD_MODE_FAST
WD_MODE_FULL = _wdissector.WD_MODE_FULL

def wdissector_init(protocol_name):
    return _wdissector.wdissector_init(protocol_name)
wdissector_init = _wdissector.wdissector_init

def wdissector_set_log_level(level):
    return _wdissector.wdissector_set_log_level(level)
wdissector_set_log_level = _wdissector.wdissector_set_log_level

def wdissector_enable_fast_full_dissection(val):
    return _wdissector.wdissector_enable_fast_full_dissection(val)
wdissector_enable_fast_full_dissection = _wdissector.wdissector_enable_fast_full_dissection

def wdissector_enable_full_dissection(val):
    return _wdissector.wdissector_enable_full_dissection(val)
wdissector_enable_full_dissection = _wdissector.wdissector_enable_full_dissection

def packet_set_protocol(lt_arg):
    return _wdissector.packet_set_protocol(lt_arg)
packet_set_protocol = _wdissector.packet_set_protocol

def packet_set_protocol_fast(proto_name):
    return _wdissector.packet_set_protocol_fast(proto_name)
packet_set_protocol_fast = _wdissector.packet_set_protocol_fast

def packet_dissect(raw_packet, packet_length):
    return _wdissector.packet_dissect(raw_packet, packet_length)
packet_dissect = _wdissector.packet_dissect

def packet_set_direction(dir):
    return _wdissector.packet_set_direction(dir)
packet_set_direction = _wdissector.packet_set_direction

def packet_cleanup():
    return _wdissector.packet_cleanup()
packet_cleanup = _wdissector.packet_cleanup

def packet_navigate(skip_layers, skip_groups, callback):
    return _wdissector.packet_navigate(skip_layers, skip_groups, callback)
packet_navigate = _wdissector.packet_navigate

def wdissector_get_edt():
    return _wdissector.wdissector_get_edt()
wdissector_get_edt = _wdissector.wdissector_get_edt

def wdissector_version_info():
    return _wdissector.wdissector_version_info()
wdissector_version_info = _wdissector.wdissector_version_info

def wdissector_profile_info():
    return _wdissector.wdissector_profile_info()
wdissector_profile_info = _wdissector.wdissector_profile_info

def packet_register_condition(filter, condition_index):
    return _wdissector.packet_register_condition(filter, condition_index)
packet_register_condition = _wdissector.packet_register_condition

def packet_set_condition(condition_index):
    return _wdissector.packet_set_condition(condition_index)
packet_set_condition = _wdissector.packet_set_condition

def packet_read_condition(condition_index):
    return _wdissector.packet_read_condition(condition_index)
packet_read_condition = _wdissector.packet_read_condition

def packet_register_filter(filter):
    return _wdissector.packet_register_filter(filter)
packet_register_filter = _wdissector.packet_register_filter

def packet_set_filter(filter):
    return _wdissector.packet_set_filter(filter)
packet_set_filter = _wdissector.packet_set_filter

def packet_read_filter(filter):
    return _wdissector.packet_read_filter(filter)
packet_read_filter = _wdissector.packet_read_filter

def packet_register_set_field_hfinfo(field_name):
    return _wdissector.packet_register_set_field_hfinfo(field_name)
packet_register_set_field_hfinfo = _wdissector.packet_register_set_field_hfinfo

def packet_get_field_exists(field_name):
    return _wdissector.packet_get_field_exists(field_name)
packet_get_field_exists = _wdissector.packet_get_field_exists

def packet_has_condition(filter):
    return _wdissector.packet_has_condition(filter)
packet_has_condition = _wdissector.packet_has_condition

def packet_get_field(field_name):
    return _wdissector.packet_get_field(field_name)
packet_get_field = _wdissector.packet_get_field

def packet_get_fields(field_name):
    return _wdissector.packet_get_fields(field_name)
packet_get_fields = _wdissector.packet_get_fields

def packet_get_field_name(field_name):
    return _wdissector.packet_get_field_name(field_name)
packet_get_field_name = _wdissector.packet_get_field_name

def packet_get_field_string(field_name):
    return _wdissector.packet_get_field_string(field_name)
packet_get_field_string = _wdissector.packet_get_field_string

def packet_get_field_offset(field_name):
    return _wdissector.packet_get_field_offset(field_name)
packet_get_field_offset = _wdissector.packet_get_field_offset

def packet_get_field_size(field_name):
    return _wdissector.packet_get_field_size(field_name)
packet_get_field_size = _wdissector.packet_get_field_size

def packet_get_field_bitmask(field_name):
    return _wdissector.packet_get_field_bitmask(field_name)
packet_get_field_bitmask = _wdissector.packet_get_field_bitmask

def packet_get_field_encoding(field_name):
    return _wdissector.packet_get_field_encoding(field_name)
packet_get_field_encoding = _wdissector.packet_get_field_encoding

def packet_get_field_type(field_name):
    return _wdissector.packet_get_field_type(field_name)
packet_get_field_type = _wdissector.packet_get_field_type

def packet_get_field_type_name(field_name):
    return _wdissector.packet_get_field_type_name(field_name)
packet_get_field_type_name = _wdissector.packet_get_field_type_name

def packet_get_field_encoding_name(field_name):
    return _wdissector.packet_get_field_encoding_name(field_name)
packet_get_field_encoding_name = _wdissector.packet_get_field_encoding_name

def packet_get_field_uint32(field_name):
    return _wdissector.packet_get_field_uint32(field_name)
packet_get_field_uint32 = _wdissector.packet_get_field_uint32

def packet_set_field_hfinfo(hfi):
    return _wdissector.packet_set_field_hfinfo(hfi)
packet_set_field_hfinfo = _wdissector.packet_set_field_hfinfo

def packet_set_field_hfinfo_all(hfi):
    return _wdissector.packet_set_field_hfinfo_all(hfi)
packet_set_field_hfinfo_all = _wdissector.packet_set_field_hfinfo_all

def packet_read_field_exists_hfinfo(hfi):
    return _wdissector.packet_read_field_exists_hfinfo(hfi)
packet_read_field_exists_hfinfo = _wdissector.packet_read_field_exists_hfinfo

def packet_read_field_hfinfo(hfi):
    return _wdissector.packet_read_field_hfinfo(hfi)
packet_read_field_hfinfo = _wdissector.packet_read_field_hfinfo

def packet_read_fields_hfinfo(hfi):
    return _wdissector.packet_read_fields_hfinfo(hfi)
packet_read_fields_hfinfo = _wdissector.packet_read_fields_hfinfo

def packet_register_field(field_name, field_hfi_index):
    return _wdissector.packet_register_field(field_name, field_hfi_index)
packet_register_field = _wdissector.packet_register_field

def packet_register_set_field(field_name, field_hfi_index):
    return _wdissector.packet_register_set_field(field_name, field_hfi_index)
packet_register_set_field = _wdissector.packet_register_set_field

def packet_set_field(hfi_index):
    return _wdissector.packet_set_field(hfi_index)
packet_set_field = _wdissector.packet_set_field

def packet_read_field(hfi_index):
    return _wdissector.packet_read_field(hfi_index)
packet_read_field = _wdissector.packet_read_field

def packet_read_fields(hfi_index):
    return _wdissector.packet_read_fields(hfi_index)
packet_read_fields = _wdissector.packet_read_fields

def packet_get_header_info(field_name):
    return _wdissector.packet_get_header_info(field_name)
packet_get_header_info = _wdissector.packet_get_header_info

def packet_read_field_at(fields, idx):
    return _wdissector.packet_read_field_at(fields, idx)
packet_read_field_at = _wdissector.packet_read_field_at

def packet_read_field_name(field_match):
    return _wdissector.packet_read_field_name(field_match)
packet_read_field_name = _wdissector.packet_read_field_name

def packet_read_field_abbrev(field_match):
    return _wdissector.packet_read_field_abbrev(field_match)
packet_read_field_abbrev = _wdissector.packet_read_field_abbrev

def packet_read_field_offset(field_match):
    return _wdissector.packet_read_field_offset(field_match)
packet_read_field_offset = _wdissector.packet_read_field_offset

def packet_read_field_size(field_match):
    return _wdissector.packet_read_field_size(field_match)
packet_read_field_size = _wdissector.packet_read_field_size

def packet_read_field_size_bits(bitmask):
    return _wdissector.packet_read_field_size_bits(bitmask)
packet_read_field_size_bits = _wdissector.packet_read_field_size_bits

def packet_read_field_bitmask(field_match):
    return _wdissector.packet_read_field_bitmask(field_match)
packet_read_field_bitmask = _wdissector.packet_read_field_bitmask

def packet_read_field_bitmask_offset(bitmask):
    return _wdissector.packet_read_field_bitmask_offset(bitmask)
packet_read_field_bitmask_offset = _wdissector.packet_read_field_bitmask_offset

def packet_read_field_bitmask_offset_msb(bitmask):
    return _wdissector.packet_read_field_bitmask_offset_msb(bitmask)
packet_read_field_bitmask_offset_msb = _wdissector.packet_read_field_bitmask_offset_msb

def packet_read_field_encoding(field_match):
    return _wdissector.packet_read_field_encoding(field_match)
packet_read_field_encoding = _wdissector.packet_read_field_encoding

def packet_read_field_type(field_match):
    return _wdissector.packet_read_field_type(field_match)
packet_read_field_type = _wdissector.packet_read_field_type

def packet_read_field_type_name(field_match):
    return _wdissector.packet_read_field_type_name(field_match)
packet_read_field_type_name = _wdissector.packet_read_field_type_name

def packet_read_field_encoding_name(field_match):
    return _wdissector.packet_read_field_encoding_name(field_match)
packet_read_field_encoding_name = _wdissector.packet_read_field_encoding_name

def packet_read_field_display_name(field_match):
    return _wdissector.packet_read_field_display_name(field_match)
packet_read_field_display_name = _wdissector.packet_read_field_display_name

def packet_read_field_string(field_match):
    return _wdissector.packet_read_field_string(field_match)
packet_read_field_string = _wdissector.packet_read_field_string

def packet_read_field_ustring(field_match):
    return _wdissector.packet_read_field_ustring(field_match)
packet_read_field_ustring = _wdissector.packet_read_field_ustring

def packet_read_field_bytes(field_match):
    return _wdissector.packet_read_field_bytes(field_match)
packet_read_field_bytes = _wdissector.packet_read_field_bytes

def packet_read_field_uint32(field_match):
    return _wdissector.packet_read_field_uint32(field_match)
packet_read_field_uint32 = _wdissector.packet_read_field_uint32

def packet_read_field_int32(field_match):
    return _wdissector.packet_read_field_int32(field_match)
packet_read_field_int32 = _wdissector.packet_read_field_int32

def packet_read_field_uint64(field_match):
    return _wdissector.packet_read_field_uint64(field_match)
packet_read_field_uint64 = _wdissector.packet_read_field_uint64

def packet_read_field_int64(field_match):
    return _wdissector.packet_read_field_int64(field_match)
packet_read_field_int64 = _wdissector.packet_read_field_int64

def packet_read_value_to_string(value, hfi):
    return _wdissector.packet_read_value_to_string(value, hfi)
packet_read_value_to_string = _wdissector.packet_read_value_to_string

def packet_show():
    return _wdissector.packet_show()
packet_show = _wdissector.packet_show

def packet_summary():
    return _wdissector.packet_summary()
packet_summary = _wdissector.packet_summary

def packet_dissectors():
    return _wdissector.packet_dissectors()
packet_dissectors = _wdissector.packet_dissectors

def packet_dissector(dissector_index):
    return _wdissector.packet_dissector(dissector_index)
packet_dissector = _wdissector.packet_dissector

def packet_dissectors_count():
    return _wdissector.packet_dissectors_count()
packet_dissectors_count = _wdissector.packet_dissectors_count

def packet_layers_count():
    return _wdissector.packet_layers_count()
packet_layers_count = _wdissector.packet_layers_count

def packet_relevant_fields():
    return _wdissector.packet_relevant_fields()
packet_relevant_fields = _wdissector.packet_relevant_fields

def packet_description():
    return _wdissector.packet_description()
packet_description = _wdissector.packet_description

def packet_direction():
    return _wdissector.packet_direction()
packet_direction = _wdissector.packet_direction

def packet_protocol():
    return _wdissector.packet_protocol()
packet_protocol = _wdissector.packet_protocol

def packet_show_pdml():
    return _wdissector.packet_show_pdml()
packet_show_pdml = _wdissector.packet_show_pdml

def packet_field_summary(raw_packet, packet_length, field_name):
    return _wdissector.packet_field_summary(raw_packet, packet_length, field_name)
packet_field_summary = _wdissector.packet_field_summary

def wd_log_g(msg):
    return _wdissector.wd_log_g(msg)
wd_log_g = _wdissector.wd_log_g

def wd_log_y(msg):
    return _wdissector.wd_log_y(msg)
wd_log_y = _wdissector.wd_log_y

def wd_log_r(msg):
    return _wdissector.wd_log_r(msg)
wd_log_r = _wdissector.wd_log_r

def set_wd_log_g(wd_func):
    return _wdissector.set_wd_log_g(wd_func)
set_wd_log_g = _wdissector.set_wd_log_g

def set_wd_log_y(wd_func):
    return _wdissector.set_wd_log_y(wd_func)
set_wd_log_y = _wdissector.set_wd_log_y

def set_wd_log_r(wd_func):
    return _wdissector.set_wd_log_r(wd_func)
set_wd_log_r = _wdissector.set_wd_log_r

def wd_init(protocol_name):
    return _wdissector.wd_init(protocol_name)
wd_init = _wdissector.wd_init

def wd_get(instance_number):
    return _wdissector.wd_get(instance_number)
wd_get = _wdissector.wd_get

def wd_free(wd):
    return _wdissector.wd_free(wd)
wd_free = _wdissector.wd_free

def wd_reset(wd):
    return _wdissector.wd_reset(wd)
wd_reset = _wdissector.wd_reset

def wd_reset_all():
    return _wdissector.wd_reset_all()
wd_reset_all = _wdissector.wd_reset_all

def wd_set_log_level(level):
    return _wdissector.wd_set_log_level(level)
wd_set_log_level = _wdissector.wd_set_log_level

def wd_packet_dissect(wd, raw_packet, packet_length):
    return _wdissector.wd_packet_dissect(wd, raw_packet, packet_length)
wd_packet_dissect = _wdissector.wd_packet_dissect

def wd_set_protocol(wd, lt_arg):
    return _wdissector.wd_set_protocol(wd, lt_arg)
wd_set_protocol = _wdissector.wd_set_protocol

def wd_set_dissection_mode(wd, wd_mode):
    return _wdissector.wd_set_dissection_mode(wd, wd_mode)
wd_set_dissection_mode = _wdissector.wd_set_dissection_mode

def wd_set_packet_direction(wd, packet_dir):
    return _wdissector.wd_set_packet_direction(wd, packet_dir)
wd_set_packet_direction = _wdissector.wd_set_packet_direction

def wd_set_field_callback(wd, fcn_callback):
    return _wdissector.wd_set_field_callback(wd, fcn_callback)
wd_set_field_callback = _wdissector.wd_set_field_callback

def wd_packet_direction(wd):
    return _wdissector.wd_packet_direction(wd)
wd_packet_direction = _wdissector.wd_packet_direction

def wd_edt(wd):
    return _wdissector.wd_edt(wd)
wd_edt = _wdissector.wd_edt

def wd_info_version():
    return _wdissector.wd_info_version()
wd_info_version = _wdissector.wd_info_version

def wd_info_profile():
    return _wdissector.wd_info_profile()
wd_info_profile = _wdissector.wd_info_profile

def wd_packet_protocol(wd):
    return _wdissector.wd_packet_protocol(wd)
wd_packet_protocol = _wdissector.wd_packet_protocol

def wd_packet_summary(wd):
    return _wdissector.wd_packet_summary(wd)
wd_packet_summary = _wdissector.wd_packet_summary

def wd_packet_show(wd):
    return _wdissector.wd_packet_show(wd)
wd_packet_show = _wdissector.wd_packet_show

def wd_packet_show_pdml(wd):
    return _wdissector.wd_packet_show_pdml(wd)
wd_packet_show_pdml = _wdissector.wd_packet_show_pdml

def wd_packet_layers_count(wd):
    return _wdissector.wd_packet_layers_count(wd)
wd_packet_layers_count = _wdissector.wd_packet_layers_count

def wd_packet_dissectors_count(wd):
    return _wdissector.wd_packet_dissectors_count(wd)
wd_packet_dissectors_count = _wdissector.wd_packet_dissectors_count

def wd_packet_dissector(wd, layer_index):
    return _wdissector.wd_packet_dissector(wd, layer_index)
wd_packet_dissector = _wdissector.wd_packet_dissector

def wd_packet_dissectors(wd):
    return _wdissector.wd_packet_dissectors(wd)
wd_packet_dissectors = _wdissector.wd_packet_dissectors

def wd_field(field_name):
    return _wdissector.wd_field(field_name)
wd_field = _wdissector.wd_field

def wd_register_field(wd, hfi):
    return _wdissector.wd_register_field(wd, hfi)
wd_register_field = _wdissector.wd_register_field

def wd_read_field(wd, hfi):
    return _wdissector.wd_read_field(wd, hfi)
wd_read_field = _wdissector.wd_read_field

def wd_read_all_fields(wd, hfi):
    return _wdissector.wd_read_all_fields(wd, hfi)
wd_read_all_fields = _wdissector.wd_read_all_fields

def wd_read_field_by_offset(wd, offset):
    return _wdissector.wd_read_field_by_offset(wd, offset)
wd_read_field_by_offset = _wdissector.wd_read_field_by_offset

def wd_filter(filter_string):
    return _wdissector.wd_filter(filter_string)
wd_filter = _wdissector.wd_filter

def wd_register_filter(wd, compiled_filter):
    return _wdissector.wd_register_filter(wd, compiled_filter)
wd_register_filter = _wdissector.wd_register_filter

def wd_read_filter(wd, compiled_filter):
    return _wdissector.wd_read_filter(wd, compiled_filter)
wd_read_filter = _wdissector.wd_read_filter
AttrType_NODE = _wdissector.AttrType_NODE
AttrType_EDGE = _wdissector.AttrType_EDGE
AttrType_GRAPH = _wdissector.AttrType_GRAPH
IOPRIO_CLASS_SHIFT = _wdissector.IOPRIO_CLASS_SHIFT
IOPRIO_CLASS_NONE = _wdissector.IOPRIO_CLASS_NONE
IOPRIO_CLASS_RT = _wdissector.IOPRIO_CLASS_RT
IOPRIO_CLASS_BE = _wdissector.IOPRIO_CLASS_BE
IOPRIO_CLASS_IDLE = _wdissector.IOPRIO_CLASS_IDLE
IOPRIO_WHO_PROCESS = _wdissector.IOPRIO_WHO_PROCESS
IOPRIO_WHO_PGRP = _wdissector.IOPRIO_WHO_PGRP
IOPRIO_WHO_USER = _wdissector.IOPRIO_WHO_USER

def ioprio_set(which, who, ioprio):
    return _wdissector.ioprio_set(which, who, ioprio)
ioprio_set = _wdissector.ioprio_set

def string_trim_trailing(str, string_to_trim):
    return _wdissector.string_trim_trailing(str, string_to_trim)
string_trim_trailing = _wdissector.string_trim_trailing

def string_split(*args):
    return _wdissector.string_split(*args)
string_split = _wdissector.string_split

def string_contains(str, substr):
    return _wdissector.string_contains(str, substr)
string_contains = _wdissector.string_contains

def string_begins(str, substr):
    return _wdissector.string_begins(str, substr)
string_begins = _wdissector.string_begins

def string_file_extension(str):
    return _wdissector.string_file_extension(str)
string_file_extension = _wdissector.string_file_extension

def string_to_lowercase(str):
    return _wdissector.string_to_lowercase(str)
string_to_lowercase = _wdissector.string_to_lowercase

def set_affinity_core(core_num):
    return _wdissector.set_affinity_core(core_num)
set_affinity_core = _wdissector.set_affinity_core

def set_affinity_no_hyperthreading(print_allowed_cores=False):
    return _wdissector.set_affinity_no_hyperthreading(print_allowed_cores)
set_affinity_no_hyperthreading = _wdissector.set_affinity_no_hyperthreading

def set_affinity(core_number):
    return _wdissector.set_affinity(core_number)
set_affinity = _wdissector.set_affinity

def enable_coredump(val):
    return _wdissector.enable_coredump(val)
enable_coredump = _wdissector.enable_coredump

def enable_rt_scheduler(use_full_time=0):
    return _wdissector.enable_rt_scheduler(use_full_time)
enable_rt_scheduler = _wdissector.enable_rt_scheduler

def enable_idle_scheduler():
    return _wdissector.enable_idle_scheduler()
enable_idle_scheduler = _wdissector.enable_idle_scheduler

def gettid():
    return _wdissector.gettid()
gettid = _wdissector.gettid

def remove_colors(buf):
    return _wdissector.remove_colors(buf)
remove_colors = _wdissector.remove_colors

def remove_colors_only(buf):
    return _wdissector.remove_colors_only(buf)
remove_colors_only = _wdissector.remove_colors_only

def print_buffer(buf, size):
    return _wdissector.print_buffer(buf, size)
print_buffer = _wdissector.print_buffer

def SaveAllLogs(folder_name):
    return _wdissector.SaveAllLogs(folder_name)
SaveAllLogs = _wdissector.SaveAllLogs

def TestPtrAccess(ptr, length):
    return _wdissector.TestPtrAccess(ptr, length)
TestPtrAccess = _wdissector.TestPtrAccess

def p2p_dir_to_string(dir):
    return _wdissector.p2p_dir_to_string(dir)
p2p_dir_to_string = _wdissector.p2p_dir_to_string

def GetPathDirName(str):
    return _wdissector.GetPathDirName(str)
GetPathDirName = _wdissector.GetPathDirName

def ProcessExecGetResult(cmd, verbose=False, timeout_seconds=5.0):
    return _wdissector.ProcessExecGetResult(cmd, verbose, timeout_seconds)
ProcessExecGetResult = _wdissector.ProcessExecGetResult

def ProcessExec(cmd, verbose=False, timeout_seconds=5.0):
    return _wdissector.ProcessExec(cmd, verbose, timeout_seconds)
ProcessExec = _wdissector.ProcessExec

def ProcessName():
    return _wdissector.ProcessName()
ProcessName = _wdissector.ProcessName

def GetVIDPIDBusLocation(*args):
    return _wdissector.GetVIDPIDBusLocation(*args)
GetVIDPIDBusLocation = _wdissector.GetVIDPIDBusLocation

def SetFolderPermission(perm_str, folder_path, user=1000, group=1000, recursive=True):
    return _wdissector.SetFolderPermission(perm_str, folder_path, user, group, recursive)
SetFolderPermission = _wdissector.SetFolderPermission

def EnsureFolder(*args):
    return _wdissector.EnsureFolder(*args)
EnsureFolder = _wdissector.EnsureFolder

def GetKernelVersion():
    return _wdissector.GetKernelVersion()
GetKernelVersion = _wdissector.GetKernelVersion

def PrintKernelVersion():
    return _wdissector.PrintKernelVersion()
PrintKernelVersion = _wdissector.PrintKernelVersion

def get_untyped(*args):
    return _wdissector.get_untyped(*args)
get_untyped = _wdissector.get_untyped
class Bluetooth(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bluetooth, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bluetooth, name)
    __repr__ = _swig_repr
    __swig_setmethods__["auth_req"] = _wdissector.Bluetooth_auth_req_set
    __swig_getmethods__["auth_req"] = _wdissector.Bluetooth_auth_req_get
    if _newclass:
        auth_req = _swig_property(_wdissector.Bluetooth_auth_req_get, _wdissector.Bluetooth_auth_req_set)
    __swig_setmethods__["bridge_hci"] = _wdissector.Bluetooth_bridge_hci_set
    __swig_getmethods__["bridge_hci"] = _wdissector.Bluetooth_bridge_hci_get
    if _newclass:
        bridge_hci = _swig_property(_wdissector.Bluetooth_bridge_hci_get, _wdissector.Bluetooth_bridge_hci_set)
    __swig_setmethods__["disable_role_switch"] = _wdissector.Bluetooth_disable_role_switch_set
    __swig_getmethods__["disable_role_switch"] = _wdissector.Bluetooth_disable_role_switch_get
    if _newclass:
        disable_role_switch = _swig_property(_wdissector.Bluetooth_disable_role_switch_get, _wdissector.Bluetooth_disable_role_switch_set)
    __swig_setmethods__["enable_bounding"] = _wdissector.Bluetooth_enable_bounding_set
    __swig_getmethods__["enable_bounding"] = _wdissector.Bluetooth_enable_bounding_get
    if _newclass:
        enable_bounding = _swig_property(_wdissector.Bluetooth_enable_bounding_get, _wdissector.Bluetooth_enable_bounding_set)
    __swig_setmethods__["io_cap"] = _wdissector.Bluetooth_io_cap_set
    __swig_getmethods__["io_cap"] = _wdissector.Bluetooth_io_cap_get
    if _newclass:
        io_cap = _swig_property(_wdissector.Bluetooth_io_cap_get, _wdissector.Bluetooth_io_cap_set)
    __swig_setmethods__["intercept_tx"] = _wdissector.Bluetooth_intercept_tx_set
    __swig_getmethods__["intercept_tx"] = _wdissector.Bluetooth_intercept_tx_get
    if _newclass:
        intercept_tx = _swig_property(_wdissector.Bluetooth_intercept_tx_get, _wdissector.Bluetooth_intercept_tx_set)
    __swig_setmethods__["lmp_sniffing"] = _wdissector.Bluetooth_lmp_sniffing_set
    __swig_getmethods__["lmp_sniffing"] = _wdissector.Bluetooth_lmp_sniffing_get
    if _newclass:
        lmp_sniffing = _swig_property(_wdissector.Bluetooth_lmp_sniffing_get, _wdissector.Bluetooth_lmp_sniffing_set)
    __swig_setmethods__["own_bd_address"] = _wdissector.Bluetooth_own_bd_address_set
    __swig_getmethods__["own_bd_address"] = _wdissector.Bluetooth_own_bd_address_get
    if _newclass:
        own_bd_address = _swig_property(_wdissector.Bluetooth_own_bd_address_get, _wdissector.Bluetooth_own_bd_address_set)
    __swig_setmethods__["pin"] = _wdissector.Bluetooth_pin_set
    __swig_getmethods__["pin"] = _wdissector.Bluetooth_pin_get
    if _newclass:
        pin = _swig_property(_wdissector.Bluetooth_pin_get, _wdissector.Bluetooth_pin_set)
    __swig_setmethods__["rx_bypass"] = _wdissector.Bluetooth_rx_bypass_set
    __swig_getmethods__["rx_bypass"] = _wdissector.Bluetooth_rx_bypass_get
    if _newclass:
        rx_bypass = _swig_property(_wdissector.Bluetooth_rx_bypass_get, _wdissector.Bluetooth_rx_bypass_set)
    __swig_setmethods__["rx_bypass_on_demand"] = _wdissector.Bluetooth_rx_bypass_on_demand_set
    __swig_getmethods__["rx_bypass_on_demand"] = _wdissector.Bluetooth_rx_bypass_on_demand_get
    if _newclass:
        rx_bypass_on_demand = _swig_property(_wdissector.Bluetooth_rx_bypass_on_demand_get, _wdissector.Bluetooth_rx_bypass_on_demand_set)
    __swig_setmethods__["randomize_own_bt_address"] = _wdissector.Bluetooth_randomize_own_bt_address_set
    __swig_getmethods__["randomize_own_bt_address"] = _wdissector.Bluetooth_randomize_own_bt_address_get
    if _newclass:
        randomize_own_bt_address = _swig_property(_wdissector.Bluetooth_randomize_own_bt_address_get, _wdissector.Bluetooth_randomize_own_bt_address_set)
    __swig_setmethods__["save_hci_packets"] = _wdissector.Bluetooth_save_hci_packets_set
    __swig_getmethods__["save_hci_packets"] = _wdissector.Bluetooth_save_hci_packets_get
    if _newclass:
        save_hci_packets = _swig_property(_wdissector.Bluetooth_save_hci_packets_get, _wdissector.Bluetooth_save_hci_packets_set)
    __swig_setmethods__["serial_auto_discovery"] = _wdissector.Bluetooth_serial_auto_discovery_set
    __swig_getmethods__["serial_auto_discovery"] = _wdissector.Bluetooth_serial_auto_discovery_get
    if _newclass:
        serial_auto_discovery = _swig_property(_wdissector.Bluetooth_serial_auto_discovery_get, _wdissector.Bluetooth_serial_auto_discovery_set)
    __swig_setmethods__["serial_baud_rate"] = _wdissector.Bluetooth_serial_baud_rate_set
    __swig_getmethods__["serial_baud_rate"] = _wdissector.Bluetooth_serial_baud_rate_get
    if _newclass:
        serial_baud_rate = _swig_property(_wdissector.Bluetooth_serial_baud_rate_get, _wdissector.Bluetooth_serial_baud_rate_set)
    __swig_setmethods__["serial_enable_debug"] = _wdissector.Bluetooth_serial_enable_debug_set
    __swig_getmethods__["serial_enable_debug"] = _wdissector.Bluetooth_serial_enable_debug_get
    if _newclass:
        serial_enable_debug = _swig_property(_wdissector.Bluetooth_serial_enable_debug_get, _wdissector.Bluetooth_serial_enable_debug_set)
    __swig_setmethods__["serial_enable_debug_hci"] = _wdissector.Bluetooth_serial_enable_debug_hci_set
    __swig_getmethods__["serial_enable_debug_hci"] = _wdissector.Bluetooth_serial_enable_debug_hci_get
    if _newclass:
        serial_enable_debug_hci = _swig_property(_wdissector.Bluetooth_serial_enable_debug_hci_get, _wdissector.Bluetooth_serial_enable_debug_hci_set)
    __swig_setmethods__["serial_port"] = _wdissector.Bluetooth_serial_port_set
    __swig_getmethods__["serial_port"] = _wdissector.Bluetooth_serial_port_get
    if _newclass:
        serial_port = _swig_property(_wdissector.Bluetooth_serial_port_get, _wdissector.Bluetooth_serial_port_set)
    __swig_setmethods__["show_null_poll_packets"] = _wdissector.Bluetooth_show_null_poll_packets_set
    __swig_getmethods__["show_null_poll_packets"] = _wdissector.Bluetooth_show_null_poll_packets_get
    if _newclass:
        show_null_poll_packets = _swig_property(_wdissector.Bluetooth_show_null_poll_packets_get, _wdissector.Bluetooth_show_null_poll_packets_set)
    __swig_setmethods__["target_bd_address"] = _wdissector.Bluetooth_target_bd_address_set
    __swig_getmethods__["target_bd_address"] = _wdissector.Bluetooth_target_bd_address_get
    if _newclass:
        target_bd_address = _swig_property(_wdissector.Bluetooth_target_bd_address_get, _wdissector.Bluetooth_target_bd_address_set)
    __swig_setmethods__["target_bd_address_list"] = _wdissector.Bluetooth_target_bd_address_list_set
    __swig_getmethods__["target_bd_address_list"] = _wdissector.Bluetooth_target_bd_address_list_get
    if _newclass:
        target_bd_address_list = _swig_property(_wdissector.Bluetooth_target_bd_address_list_get, _wdissector.Bluetooth_target_bd_address_list_set)

    def __init__(self):
        this = _wdissector.new_Bluetooth()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Bluetooth
    __del__ = lambda self: None
Bluetooth_swigregister = _wdissector.Bluetooth_swigregister
Bluetooth_swigregister(Bluetooth)
cvar = _wdissector.cvar

class Exclude(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exclude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exclude, name)
    __repr__ = _swig_repr
    __swig_setmethods__["apply_to"] = _wdissector.Exclude_apply_to_set
    __swig_getmethods__["apply_to"] = _wdissector.Exclude_apply_to_get
    if _newclass:
        apply_to = _swig_property(_wdissector.Exclude_apply_to_get, _wdissector.Exclude_apply_to_set)
    __swig_setmethods__["description"] = _wdissector.Exclude_description_set
    __swig_getmethods__["description"] = _wdissector.Exclude_description_get
    if _newclass:
        description = _swig_property(_wdissector.Exclude_description_get, _wdissector.Exclude_description_set)
    __swig_setmethods__["filter"] = _wdissector.Exclude_filter_set
    __swig_getmethods__["filter"] = _wdissector.Exclude_filter_get
    if _newclass:
        filter = _swig_property(_wdissector.Exclude_filter_get, _wdissector.Exclude_filter_set)

    def __init__(self):
        this = _wdissector.new_Exclude()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Exclude
    __del__ = lambda self: None
Exclude_swigregister = _wdissector.Exclude_swigregister
Exclude_swigregister(Exclude)

class StopCondition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StopCondition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_iterations"] = _wdissector.StopCondition_max_iterations_set
    __swig_getmethods__["max_iterations"] = _wdissector.StopCondition_max_iterations_get
    if _newclass:
        max_iterations = _swig_property(_wdissector.StopCondition_max_iterations_get, _wdissector.StopCondition_max_iterations_set)
    __swig_setmethods__["max_time_minutes"] = _wdissector.StopCondition_max_time_minutes_set
    __swig_getmethods__["max_time_minutes"] = _wdissector.StopCondition_max_time_minutes_get
    if _newclass:
        max_time_minutes = _swig_property(_wdissector.StopCondition_max_time_minutes_get, _wdissector.StopCondition_max_time_minutes_set)
    __swig_setmethods__["stop_on_max_iterations"] = _wdissector.StopCondition_stop_on_max_iterations_set
    __swig_getmethods__["stop_on_max_iterations"] = _wdissector.StopCondition_stop_on_max_iterations_get
    if _newclass:
        stop_on_max_iterations = _swig_property(_wdissector.StopCondition_stop_on_max_iterations_get, _wdissector.StopCondition_stop_on_max_iterations_set)
    __swig_setmethods__["stop_on_max_time_minutes"] = _wdissector.StopCondition_stop_on_max_time_minutes_set
    __swig_getmethods__["stop_on_max_time_minutes"] = _wdissector.StopCondition_stop_on_max_time_minutes_get
    if _newclass:
        stop_on_max_time_minutes = _swig_property(_wdissector.StopCondition_stop_on_max_time_minutes_get, _wdissector.StopCondition_stop_on_max_time_minutes_set)

    def __init__(self):
        this = _wdissector.new_StopCondition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_StopCondition
    __del__ = lambda self: None
StopCondition_swigregister = _wdissector.StopCondition_swigregister
StopCondition_swigregister(StopCondition)

class Fuzzing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fuzzing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fuzzing, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable_duplication"] = _wdissector.Fuzzing_enable_duplication_set
    __swig_getmethods__["enable_duplication"] = _wdissector.Fuzzing_enable_duplication_get
    if _newclass:
        enable_duplication = _swig_property(_wdissector.Fuzzing_enable_duplication_get, _wdissector.Fuzzing_enable_duplication_set)
    __swig_setmethods__["enable_mutation"] = _wdissector.Fuzzing_enable_mutation_set
    __swig_getmethods__["enable_mutation"] = _wdissector.Fuzzing_enable_mutation_get
    if _newclass:
        enable_mutation = _swig_property(_wdissector.Fuzzing_enable_mutation_get, _wdissector.Fuzzing_enable_mutation_set)
    __swig_setmethods__["enable_optimization"] = _wdissector.Fuzzing_enable_optimization_set
    __swig_getmethods__["enable_optimization"] = _wdissector.Fuzzing_enable_optimization_get
    if _newclass:
        enable_optimization = _swig_property(_wdissector.Fuzzing_enable_optimization_get, _wdissector.Fuzzing_enable_optimization_set)
    __swig_setmethods__["default_duplication_probability"] = _wdissector.Fuzzing_default_duplication_probability_set
    __swig_getmethods__["default_duplication_probability"] = _wdissector.Fuzzing_default_duplication_probability_get
    if _newclass:
        default_duplication_probability = _swig_property(_wdissector.Fuzzing_default_duplication_probability_get, _wdissector.Fuzzing_default_duplication_probability_set)
    __swig_setmethods__["default_mutation_probability"] = _wdissector.Fuzzing_default_mutation_probability_set
    __swig_getmethods__["default_mutation_probability"] = _wdissector.Fuzzing_default_mutation_probability_get
    if _newclass:
        default_mutation_probability = _swig_property(_wdissector.Fuzzing_default_mutation_probability_get, _wdissector.Fuzzing_default_mutation_probability_set)
    __swig_setmethods__["default_mutation_field_probability"] = _wdissector.Fuzzing_default_mutation_field_probability_set
    __swig_getmethods__["default_mutation_field_probability"] = _wdissector.Fuzzing_default_mutation_field_probability_get
    if _newclass:
        default_mutation_field_probability = _swig_property(_wdissector.Fuzzing_default_mutation_field_probability_get, _wdissector.Fuzzing_default_mutation_field_probability_set)
    __swig_setmethods__["field_mutation_backoff_multipler"] = _wdissector.Fuzzing_field_mutation_backoff_multipler_set
    __swig_getmethods__["field_mutation_backoff_multipler"] = _wdissector.Fuzzing_field_mutation_backoff_multipler_get
    if _newclass:
        field_mutation_backoff_multipler = _swig_property(_wdissector.Fuzzing_field_mutation_backoff_multipler_get, _wdissector.Fuzzing_field_mutation_backoff_multipler_set)
    __swig_setmethods__["max_fields_mutation"] = _wdissector.Fuzzing_max_fields_mutation_set
    __swig_getmethods__["max_fields_mutation"] = _wdissector.Fuzzing_max_fields_mutation_get
    if _newclass:
        max_fields_mutation = _swig_property(_wdissector.Fuzzing_max_fields_mutation_get, _wdissector.Fuzzing_max_fields_mutation_set)
    __swig_setmethods__["normalize_protocol_layers_mutation"] = _wdissector.Fuzzing_normalize_protocol_layers_mutation_set
    __swig_getmethods__["normalize_protocol_layers_mutation"] = _wdissector.Fuzzing_normalize_protocol_layers_mutation_get
    if _newclass:
        normalize_protocol_layers_mutation = _swig_property(_wdissector.Fuzzing_normalize_protocol_layers_mutation_get, _wdissector.Fuzzing_normalize_protocol_layers_mutation_set)
    __swig_setmethods__["max_duplication_time_ms"] = _wdissector.Fuzzing_max_duplication_time_ms_set
    __swig_getmethods__["max_duplication_time_ms"] = _wdissector.Fuzzing_max_duplication_time_ms_get
    if _newclass:
        max_duplication_time_ms = _swig_property(_wdissector.Fuzzing_max_duplication_time_ms_get, _wdissector.Fuzzing_max_duplication_time_ms_set)
    __swig_setmethods__["packet_retry"] = _wdissector.Fuzzing_packet_retry_set
    __swig_getmethods__["packet_retry"] = _wdissector.Fuzzing_packet_retry_get
    if _newclass:
        packet_retry = _swig_property(_wdissector.Fuzzing_packet_retry_get, _wdissector.Fuzzing_packet_retry_set)
    __swig_setmethods__["packet_retry_timeout_ms"] = _wdissector.Fuzzing_packet_retry_timeout_ms_set
    __swig_getmethods__["packet_retry_timeout_ms"] = _wdissector.Fuzzing_packet_retry_timeout_ms_get
    if _newclass:
        packet_retry_timeout_ms = _swig_property(_wdissector.Fuzzing_packet_retry_timeout_ms_get, _wdissector.Fuzzing_packet_retry_timeout_ms_set)
    __swig_setmethods__["global_timeout"] = _wdissector.Fuzzing_global_timeout_set
    __swig_getmethods__["global_timeout"] = _wdissector.Fuzzing_global_timeout_get
    if _newclass:
        global_timeout = _swig_property(_wdissector.Fuzzing_global_timeout_get, _wdissector.Fuzzing_global_timeout_set)
    __swig_setmethods__["global_timeout_seconds"] = _wdissector.Fuzzing_global_timeout_seconds_set
    __swig_getmethods__["global_timeout_seconds"] = _wdissector.Fuzzing_global_timeout_seconds_get
    if _newclass:
        global_timeout_seconds = _swig_property(_wdissector.Fuzzing_global_timeout_seconds_get, _wdissector.Fuzzing_global_timeout_seconds_set)
    __swig_setmethods__["state_loop_detection"] = _wdissector.Fuzzing_state_loop_detection_set
    __swig_getmethods__["state_loop_detection"] = _wdissector.Fuzzing_state_loop_detection_get
    if _newclass:
        state_loop_detection = _swig_property(_wdissector.Fuzzing_state_loop_detection_get, _wdissector.Fuzzing_state_loop_detection_set)
    __swig_setmethods__["state_loop_detection_threshold"] = _wdissector.Fuzzing_state_loop_detection_threshold_set
    __swig_getmethods__["state_loop_detection_threshold"] = _wdissector.Fuzzing_state_loop_detection_threshold_get
    if _newclass:
        state_loop_detection_threshold = _swig_property(_wdissector.Fuzzing_state_loop_detection_threshold_get, _wdissector.Fuzzing_state_loop_detection_threshold_set)
    __swig_setmethods__["random_seed"] = _wdissector.Fuzzing_random_seed_set
    __swig_getmethods__["random_seed"] = _wdissector.Fuzzing_random_seed_get
    if _newclass:
        random_seed = _swig_property(_wdissector.Fuzzing_random_seed_get, _wdissector.Fuzzing_random_seed_set)
    __swig_setmethods__["seed_increment_every_iteration"] = _wdissector.Fuzzing_seed_increment_every_iteration_set
    __swig_getmethods__["seed_increment_every_iteration"] = _wdissector.Fuzzing_seed_increment_every_iteration_get
    if _newclass:
        seed_increment_every_iteration = _swig_property(_wdissector.Fuzzing_seed_increment_every_iteration_get, _wdissector.Fuzzing_seed_increment_every_iteration_set)
    __swig_setmethods__["restore_session_on_startup"] = _wdissector.Fuzzing_restore_session_on_startup_set
    __swig_getmethods__["restore_session_on_startup"] = _wdissector.Fuzzing_restore_session_on_startup_get
    if _newclass:
        restore_session_on_startup = _swig_property(_wdissector.Fuzzing_restore_session_on_startup_get, _wdissector.Fuzzing_restore_session_on_startup_set)
    __swig_setmethods__["save_session_on_exit"] = _wdissector.Fuzzing_save_session_on_exit_set
    __swig_getmethods__["save_session_on_exit"] = _wdissector.Fuzzing_save_session_on_exit_get
    if _newclass:
        save_session_on_exit = _swig_property(_wdissector.Fuzzing_save_session_on_exit_get, _wdissector.Fuzzing_save_session_on_exit_set)
    __swig_setmethods__["stop_condition"] = _wdissector.Fuzzing_stop_condition_set
    __swig_getmethods__["stop_condition"] = _wdissector.Fuzzing_stop_condition_get
    if _newclass:
        stop_condition = _swig_property(_wdissector.Fuzzing_stop_condition_get, _wdissector.Fuzzing_stop_condition_set)
    __swig_setmethods__["selector"] = _wdissector.Fuzzing_selector_set
    __swig_getmethods__["selector"] = _wdissector.Fuzzing_selector_get
    if _newclass:
        selector = _swig_property(_wdissector.Fuzzing_selector_get, _wdissector.Fuzzing_selector_set)
    __swig_setmethods__["mutator"] = _wdissector.Fuzzing_mutator_set
    __swig_getmethods__["mutator"] = _wdissector.Fuzzing_mutator_get
    if _newclass:
        mutator = _swig_property(_wdissector.Fuzzing_mutator_get, _wdissector.Fuzzing_mutator_set)
    __swig_setmethods__["default_mutators"] = _wdissector.Fuzzing_default_mutators_set
    __swig_getmethods__["default_mutators"] = _wdissector.Fuzzing_default_mutators_get
    if _newclass:
        default_mutators = _swig_property(_wdissector.Fuzzing_default_mutators_get, _wdissector.Fuzzing_default_mutators_set)
    __swig_setmethods__["default_selectors"] = _wdissector.Fuzzing_default_selectors_set
    __swig_getmethods__["default_selectors"] = _wdissector.Fuzzing_default_selectors_get
    if _newclass:
        default_selectors = _swig_property(_wdissector.Fuzzing_default_selectors_get, _wdissector.Fuzzing_default_selectors_set)
    __swig_setmethods__["excludes"] = _wdissector.Fuzzing_excludes_set
    __swig_getmethods__["excludes"] = _wdissector.Fuzzing_excludes_get
    if _newclass:
        excludes = _swig_property(_wdissector.Fuzzing_excludes_get, _wdissector.Fuzzing_excludes_set)

    def __init__(self):
        this = _wdissector.new_Fuzzing()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Fuzzing
    __del__ = lambda self: None
Fuzzing_swigregister = _wdissector.Fuzzing_swigregister
Fuzzing_swigregister(Fuzzing)

class Adb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Adb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["adb_device"] = _wdissector.Adb_adb_device_set
    __swig_getmethods__["adb_device"] = _wdissector.Adb_adb_device_get
    if _newclass:
        adb_device = _swig_property(_wdissector.Adb_adb_device_get, _wdissector.Adb_adb_device_set)
    __swig_setmethods__["adb_filter"] = _wdissector.Adb_adb_filter_set
    __swig_getmethods__["adb_filter"] = _wdissector.Adb_adb_filter_get
    if _newclass:
        adb_filter = _swig_property(_wdissector.Adb_adb_filter_get, _wdissector.Adb_adb_filter_set)
    __swig_setmethods__["adb_magic_words"] = _wdissector.Adb_adb_magic_words_set
    __swig_getmethods__["adb_magic_words"] = _wdissector.Adb_adb_magic_words_get
    if _newclass:
        adb_magic_words = _swig_property(_wdissector.Adb_adb_magic_words_get, _wdissector.Adb_adb_magic_words_set)
    __swig_setmethods__["adb_program"] = _wdissector.Adb_adb_program_set
    __swig_getmethods__["adb_program"] = _wdissector.Adb_adb_program_get
    if _newclass:
        adb_program = _swig_property(_wdissector.Adb_adb_program_get, _wdissector.Adb_adb_program_set)
    __swig_setmethods__["adb_sub_system"] = _wdissector.Adb_adb_sub_system_set
    __swig_getmethods__["adb_sub_system"] = _wdissector.Adb_adb_sub_system_get
    if _newclass:
        adb_sub_system = _swig_property(_wdissector.Adb_adb_sub_system_get, _wdissector.Adb_adb_sub_system_set)

    def __init__(self):
        this = _wdissector.new_Adb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Adb
    __del__ = lambda self: None
Adb_swigregister = _wdissector.Adb_swigregister
Adb_swigregister(Adb)

class Microphone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Microphone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Microphone, name)
    __repr__ = _swig_repr
    __swig_setmethods__["microphone_detection_sensitivity"] = _wdissector.Microphone_microphone_detection_sensitivity_set
    __swig_getmethods__["microphone_detection_sensitivity"] = _wdissector.Microphone_microphone_detection_sensitivity_get
    if _newclass:
        microphone_detection_sensitivity = _swig_property(_wdissector.Microphone_microphone_detection_sensitivity_get, _wdissector.Microphone_microphone_detection_sensitivity_set)
    __swig_setmethods__["microphone_device_id"] = _wdissector.Microphone_microphone_device_id_set
    __swig_getmethods__["microphone_device_id"] = _wdissector.Microphone_microphone_device_id_get
    if _newclass:
        microphone_device_id = _swig_property(_wdissector.Microphone_microphone_device_id_get, _wdissector.Microphone_microphone_device_id_set)

    def __init__(self):
        this = _wdissector.new_Microphone()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Microphone
    __del__ = lambda self: None
Microphone_swigregister = _wdissector.Microphone_swigregister
Microphone_swigregister(Microphone)

class Qcdm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qcdm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qcdm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qcdmadb"] = _wdissector.Qcdm_qcdmadb_set
    __swig_getmethods__["qcdmadb"] = _wdissector.Qcdm_qcdmadb_get
    if _newclass:
        qcdmadb = _swig_property(_wdissector.Qcdm_qcdmadb_get, _wdissector.Qcdm_qcdmadb_set)
    __swig_setmethods__["qcdm_device"] = _wdissector.Qcdm_qcdm_device_set
    __swig_getmethods__["qcdm_device"] = _wdissector.Qcdm_qcdm_device_get
    if _newclass:
        qcdm_device = _swig_property(_wdissector.Qcdm_qcdm_device_get, _wdissector.Qcdm_qcdm_device_set)
    __swig_setmethods__["qcdm_magic_words"] = _wdissector.Qcdm_qcdm_magic_words_set
    __swig_getmethods__["qcdm_magic_words"] = _wdissector.Qcdm_qcdm_magic_words_get
    if _newclass:
        qcdm_magic_words = _swig_property(_wdissector.Qcdm_qcdm_magic_words_get, _wdissector.Qcdm_qcdm_magic_words_set)

    def __init__(self):
        this = _wdissector.new_Qcdm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Qcdm
    __del__ = lambda self: None
Qcdm_swigregister = _wdissector.Qcdm_swigregister
Qcdm_swigregister(Qcdm)

class SerialUart(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerialUart, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerialUart, name)
    __repr__ = _swig_repr
    __swig_setmethods__["serial_baud_rate"] = _wdissector.SerialUart_serial_baud_rate_set
    __swig_getmethods__["serial_baud_rate"] = _wdissector.SerialUart_serial_baud_rate_get
    if _newclass:
        serial_baud_rate = _swig_property(_wdissector.SerialUart_serial_baud_rate_get, _wdissector.SerialUart_serial_baud_rate_set)
    __swig_setmethods__["serial_magic_words"] = _wdissector.SerialUart_serial_magic_words_set
    __swig_getmethods__["serial_magic_words"] = _wdissector.SerialUart_serial_magic_words_get
    if _newclass:
        serial_magic_words = _swig_property(_wdissector.SerialUart_serial_magic_words_get, _wdissector.SerialUart_serial_magic_words_set)
    __swig_setmethods__["serial_port_name"] = _wdissector.SerialUart_serial_port_name_set
    __swig_getmethods__["serial_port_name"] = _wdissector.SerialUart_serial_port_name_get
    if _newclass:
        serial_port_name = _swig_property(_wdissector.SerialUart_serial_port_name_get, _wdissector.SerialUart_serial_port_name_set)

    def __init__(self):
        this = _wdissector.new_SerialUart()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_SerialUart
    __del__ = lambda self: None
SerialUart_swigregister = _wdissector.SerialUart_swigregister
SerialUart_swigregister(SerialUart)

class Ssh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ssh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ssh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ssh_command"] = _wdissector.Ssh_ssh_command_set
    __swig_getmethods__["ssh_command"] = _wdissector.Ssh_ssh_command_get
    if _newclass:
        ssh_command = _swig_property(_wdissector.Ssh_ssh_command_get, _wdissector.Ssh_ssh_command_set)
    __swig_setmethods__["ssh_enable_pre_commands"] = _wdissector.Ssh_ssh_enable_pre_commands_set
    __swig_getmethods__["ssh_enable_pre_commands"] = _wdissector.Ssh_ssh_enable_pre_commands_get
    if _newclass:
        ssh_enable_pre_commands = _swig_property(_wdissector.Ssh_ssh_enable_pre_commands_get, _wdissector.Ssh_ssh_enable_pre_commands_set)
    __swig_setmethods__["ssh_host_address"] = _wdissector.Ssh_ssh_host_address_set
    __swig_getmethods__["ssh_host_address"] = _wdissector.Ssh_ssh_host_address_get
    if _newclass:
        ssh_host_address = _swig_property(_wdissector.Ssh_ssh_host_address_get, _wdissector.Ssh_ssh_host_address_set)
    __swig_setmethods__["ssh_magic_words"] = _wdissector.Ssh_ssh_magic_words_set
    __swig_getmethods__["ssh_magic_words"] = _wdissector.Ssh_ssh_magic_words_get
    if _newclass:
        ssh_magic_words = _swig_property(_wdissector.Ssh_ssh_magic_words_get, _wdissector.Ssh_ssh_magic_words_set)
    __swig_setmethods__["ssh_password"] = _wdissector.Ssh_ssh_password_set
    __swig_getmethods__["ssh_password"] = _wdissector.Ssh_ssh_password_get
    if _newclass:
        ssh_password = _swig_property(_wdissector.Ssh_ssh_password_get, _wdissector.Ssh_ssh_password_set)
    __swig_setmethods__["ssh_port"] = _wdissector.Ssh_ssh_port_set
    __swig_getmethods__["ssh_port"] = _wdissector.Ssh_ssh_port_get
    if _newclass:
        ssh_port = _swig_property(_wdissector.Ssh_ssh_port_get, _wdissector.Ssh_ssh_port_set)
    __swig_setmethods__["ssh_pre_commands"] = _wdissector.Ssh_ssh_pre_commands_set
    __swig_getmethods__["ssh_pre_commands"] = _wdissector.Ssh_ssh_pre_commands_get
    if _newclass:
        ssh_pre_commands = _swig_property(_wdissector.Ssh_ssh_pre_commands_get, _wdissector.Ssh_ssh_pre_commands_set)
    __swig_setmethods__["ssh_username"] = _wdissector.Ssh_ssh_username_set
    __swig_getmethods__["ssh_username"] = _wdissector.Ssh_ssh_username_get
    if _newclass:
        ssh_username = _swig_property(_wdissector.Ssh_ssh_username_get, _wdissector.Ssh_ssh_username_set)

    def __init__(self):
        this = _wdissector.new_Ssh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Ssh
    __del__ = lambda self: None
Ssh_swigregister = _wdissector.Ssh_swigregister
Ssh_swigregister(Ssh)

class Monitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Monitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.Monitor_enable_set
    __swig_getmethods__["enable"] = _wdissector.Monitor_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.Monitor_enable_get, _wdissector.Monitor_enable_set)
    __swig_setmethods__["print_to_stdout"] = _wdissector.Monitor_print_to_stdout_set
    __swig_getmethods__["print_to_stdout"] = _wdissector.Monitor_print_to_stdout_get
    if _newclass:
        print_to_stdout = _swig_property(_wdissector.Monitor_print_to_stdout_get, _wdissector.Monitor_print_to_stdout_set)
    __swig_setmethods__["wait_external_event"] = _wdissector.Monitor_wait_external_event_set
    __swig_getmethods__["wait_external_event"] = _wdissector.Monitor_wait_external_event_get
    if _newclass:
        wait_external_event = _swig_property(_wdissector.Monitor_wait_external_event_get, _wdissector.Monitor_wait_external_event_set)
    __swig_setmethods__["active_monitor_types"] = _wdissector.Monitor_active_monitor_types_set
    __swig_getmethods__["active_monitor_types"] = _wdissector.Monitor_active_monitor_types_get
    if _newclass:
        active_monitor_types = _swig_property(_wdissector.Monitor_active_monitor_types_get, _wdissector.Monitor_active_monitor_types_set)
    __swig_setmethods__["monitors_type_list"] = _wdissector.Monitor_monitors_type_list_set
    __swig_getmethods__["monitors_type_list"] = _wdissector.Monitor_monitors_type_list_get
    if _newclass:
        monitors_type_list = _swig_property(_wdissector.Monitor_monitors_type_list_get, _wdissector.Monitor_monitors_type_list_set)
    __swig_setmethods__["serial_uart"] = _wdissector.Monitor_serial_uart_set
    __swig_getmethods__["serial_uart"] = _wdissector.Monitor_serial_uart_get
    if _newclass:
        serial_uart = _swig_property(_wdissector.Monitor_serial_uart_get, _wdissector.Monitor_serial_uart_set)
    __swig_setmethods__["adb"] = _wdissector.Monitor_adb_set
    __swig_getmethods__["adb"] = _wdissector.Monitor_adb_get
    if _newclass:
        adb = _swig_property(_wdissector.Monitor_adb_get, _wdissector.Monitor_adb_set)
    __swig_setmethods__["microphone"] = _wdissector.Monitor_microphone_set
    __swig_getmethods__["microphone"] = _wdissector.Monitor_microphone_get
    if _newclass:
        microphone = _swig_property(_wdissector.Monitor_microphone_get, _wdissector.Monitor_microphone_set)
    __swig_setmethods__["ssh"] = _wdissector.Monitor_ssh_set
    __swig_getmethods__["ssh"] = _wdissector.Monitor_ssh_get
    if _newclass:
        ssh = _swig_property(_wdissector.Monitor_ssh_get, _wdissector.Monitor_ssh_set)
    __swig_setmethods__["qcdm"] = _wdissector.Monitor_qcdm_set
    __swig_getmethods__["qcdm"] = _wdissector.Monitor_qcdm_get
    if _newclass:
        qcdm = _swig_property(_wdissector.Monitor_qcdm_get, _wdissector.Monitor_qcdm_set)

    def __init__(self):
        this = _wdissector.new_Monitor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Monitor
    __del__ = lambda self: None
Monitor_swigregister = _wdissector.Monitor_swigregister
Monitor_swigregister(Monitor)

class Subscriber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subscriber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Subscriber, name)
    __repr__ = _swig_repr
    __swig_setmethods__["imsi"] = _wdissector.Subscriber_imsi_set
    __swig_getmethods__["imsi"] = _wdissector.Subscriber_imsi_get
    if _newclass:
        imsi = _swig_property(_wdissector.Subscriber_imsi_get, _wdissector.Subscriber_imsi_set)
    __swig_setmethods__["k"] = _wdissector.Subscriber_k_set
    __swig_getmethods__["k"] = _wdissector.Subscriber_k_get
    if _newclass:
        k = _swig_property(_wdissector.Subscriber_k_get, _wdissector.Subscriber_k_set)
    __swig_setmethods__["opc"] = _wdissector.Subscriber_opc_set
    __swig_getmethods__["opc"] = _wdissector.Subscriber_opc_get
    if _newclass:
        opc = _swig_property(_wdissector.Subscriber_opc_get, _wdissector.Subscriber_opc_set)
    __swig_setmethods__["apn"] = _wdissector.Subscriber_apn_set
    __swig_getmethods__["apn"] = _wdissector.Subscriber_apn_get
    if _newclass:
        apn = _swig_property(_wdissector.Subscriber_apn_get, _wdissector.Subscriber_apn_set)
    __swig_setmethods__["op"] = _wdissector.Subscriber_op_set
    __swig_getmethods__["op"] = _wdissector.Subscriber_op_get
    if _newclass:
        op = _swig_property(_wdissector.Subscriber_op_get, _wdissector.Subscriber_op_set)

    def __init__(self):
        this = _wdissector.new_Subscriber()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Subscriber
    __del__ = lambda self: None
Subscriber_swigregister = _wdissector.Subscriber_swigregister
Subscriber_swigregister(Subscriber)

class Nr5G(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nr5G, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Nr5G, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mcc"] = _wdissector.Nr5G_mcc_set
    __swig_getmethods__["mcc"] = _wdissector.Nr5G_mcc_get
    if _newclass:
        mcc = _swig_property(_wdissector.Nr5G_mcc_get, _wdissector.Nr5G_mcc_set)
    __swig_setmethods__["mnc"] = _wdissector.Nr5G_mnc_set
    __swig_getmethods__["mnc"] = _wdissector.Nr5G_mnc_get
    if _newclass:
        mnc = _swig_property(_wdissector.Nr5G_mnc_get, _wdissector.Nr5G_mnc_set)
    __swig_setmethods__["auto_start_base_station"] = _wdissector.Nr5G_auto_start_base_station_set
    __swig_getmethods__["auto_start_base_station"] = _wdissector.Nr5G_auto_start_base_station_get
    if _newclass:
        auto_start_base_station = _swig_property(_wdissector.Nr5G_auto_start_base_station_get, _wdissector.Nr5G_auto_start_base_station_set)
    __swig_setmethods__["auto_start_core_network"] = _wdissector.Nr5G_auto_start_core_network_set
    __swig_getmethods__["auto_start_core_network"] = _wdissector.Nr5G_auto_start_core_network_get
    if _newclass:
        auto_start_core_network = _swig_property(_wdissector.Nr5G_auto_start_core_network_get, _wdissector.Nr5G_auto_start_core_network_set)
    __swig_setmethods__["base_station_config_file"] = _wdissector.Nr5G_base_station_config_file_set
    __swig_getmethods__["base_station_config_file"] = _wdissector.Nr5G_base_station_config_file_get
    if _newclass:
        base_station_config_file = _swig_property(_wdissector.Nr5G_base_station_config_file_get, _wdissector.Nr5G_base_station_config_file_set)
    __swig_setmethods__["base_station_arguments"] = _wdissector.Nr5G_base_station_arguments_set
    __swig_getmethods__["base_station_arguments"] = _wdissector.Nr5G_base_station_arguments_get
    if _newclass:
        base_station_arguments = _swig_property(_wdissector.Nr5G_base_station_arguments_get, _wdissector.Nr5G_base_station_arguments_set)
    __swig_setmethods__["core_network_config_file"] = _wdissector.Nr5G_core_network_config_file_set
    __swig_getmethods__["core_network_config_file"] = _wdissector.Nr5G_core_network_config_file_get
    if _newclass:
        core_network_config_file = _swig_property(_wdissector.Nr5G_core_network_config_file_get, _wdissector.Nr5G_core_network_config_file_set)
    __swig_setmethods__["enable_simulator"] = _wdissector.Nr5G_enable_simulator_set
    __swig_getmethods__["enable_simulator"] = _wdissector.Nr5G_enable_simulator_get
    if _newclass:
        enable_simulator = _swig_property(_wdissector.Nr5G_enable_simulator_get, _wdissector.Nr5G_enable_simulator_set)
    __swig_setmethods__["simulator_delay_us"] = _wdissector.Nr5G_simulator_delay_us_set
    __swig_getmethods__["simulator_delay_us"] = _wdissector.Nr5G_simulator_delay_us_get
    if _newclass:
        simulator_delay_us = _swig_property(_wdissector.Nr5G_simulator_delay_us_get, _wdissector.Nr5G_simulator_delay_us_set)
    __swig_setmethods__["simulation_connection_timeout_ms"] = _wdissector.Nr5G_simulation_connection_timeout_ms_set
    __swig_getmethods__["simulation_connection_timeout_ms"] = _wdissector.Nr5G_simulation_connection_timeout_ms_get
    if _newclass:
        simulation_connection_timeout_ms = _swig_property(_wdissector.Nr5G_simulation_connection_timeout_ms_get, _wdissector.Nr5G_simulation_connection_timeout_ms_set)
    __swig_setmethods__["simulator_ue_arguments"] = _wdissector.Nr5G_simulator_ue_arguments_set
    __swig_getmethods__["simulator_ue_arguments"] = _wdissector.Nr5G_simulator_ue_arguments_get
    if _newclass:
        simulator_ue_arguments = _swig_property(_wdissector.Nr5G_simulator_ue_arguments_get, _wdissector.Nr5G_simulator_ue_arguments_set)
    __swig_setmethods__["subscribers"] = _wdissector.Nr5G_subscribers_set
    __swig_getmethods__["subscribers"] = _wdissector.Nr5G_subscribers_get
    if _newclass:
        subscribers = _swig_property(_wdissector.Nr5G_subscribers_get, _wdissector.Nr5G_subscribers_set)

    def __init__(self):
        this = _wdissector.new_Nr5G()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Nr5G
    __del__ = lambda self: None
Nr5G_swigregister = _wdissector.Nr5G_swigregister
Nr5G_swigregister(Nr5G)

class Options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["default_protocol_name"] = _wdissector.Options_default_protocol_name_set
    __swig_getmethods__["default_protocol_name"] = _wdissector.Options_default_protocol_name_get
    if _newclass:
        default_protocol_name = _swig_property(_wdissector.Options_default_protocol_name_get, _wdissector.Options_default_protocol_name_set)
    __swig_setmethods__["default_protocol_encap_name"] = _wdissector.Options_default_protocol_encap_name_set
    __swig_getmethods__["default_protocol_encap_name"] = _wdissector.Options_default_protocol_encap_name_get
    if _newclass:
        default_protocol_encap_name = _swig_property(_wdissector.Options_default_protocol_encap_name_get, _wdissector.Options_default_protocol_encap_name_set)
    __swig_setmethods__["save_protocol_capture"] = _wdissector.Options_save_protocol_capture_set
    __swig_getmethods__["save_protocol_capture"] = _wdissector.Options_save_protocol_capture_get
    if _newclass:
        save_protocol_capture = _swig_property(_wdissector.Options_save_protocol_capture_get, _wdissector.Options_save_protocol_capture_set)
    __swig_setmethods__["live_protocol_capture"] = _wdissector.Options_live_protocol_capture_set
    __swig_getmethods__["live_protocol_capture"] = _wdissector.Options_live_protocol_capture_get
    if _newclass:
        live_protocol_capture = _swig_property(_wdissector.Options_live_protocol_capture_get, _wdissector.Options_live_protocol_capture_set)
    __swig_setmethods__["save_logs_to_file"] = _wdissector.Options_save_logs_to_file_set
    __swig_getmethods__["save_logs_to_file"] = _wdissector.Options_save_logs_to_file_get
    if _newclass:
        save_logs_to_file = _swig_property(_wdissector.Options_save_logs_to_file_get, _wdissector.Options_save_logs_to_file_set)
    __swig_setmethods__["save_latency_metrics"] = _wdissector.Options_save_latency_metrics_set
    __swig_getmethods__["save_latency_metrics"] = _wdissector.Options_save_latency_metrics_get
    if _newclass:
        save_latency_metrics = _swig_property(_wdissector.Options_save_latency_metrics_get, _wdissector.Options_save_latency_metrics_set)
    __swig_setmethods__["skip_packet_processing"] = _wdissector.Options_skip_packet_processing_set
    __swig_getmethods__["skip_packet_processing"] = _wdissector.Options_skip_packet_processing_get
    if _newclass:
        skip_packet_processing = _swig_property(_wdissector.Options_skip_packet_processing_get, _wdissector.Options_skip_packet_processing_set)
    __swig_setmethods__["program"] = _wdissector.Options_program_set
    __swig_getmethods__["program"] = _wdissector.Options_program_get
    if _newclass:
        program = _swig_property(_wdissector.Options_program_get, _wdissector.Options_program_set)
    __swig_setmethods__["auto_start_program"] = _wdissector.Options_auto_start_program_set
    __swig_getmethods__["auto_start_program"] = _wdissector.Options_auto_start_program_get
    if _newclass:
        auto_start_program = _swig_property(_wdissector.Options_auto_start_program_get, _wdissector.Options_auto_start_program_set)
    __swig_setmethods__["auto_restart_program"] = _wdissector.Options_auto_restart_program_set
    __swig_getmethods__["auto_restart_program"] = _wdissector.Options_auto_restart_program_get
    if _newclass:
        auto_restart_program = _swig_property(_wdissector.Options_auto_restart_program_get, _wdissector.Options_auto_restart_program_set)
    __swig_setmethods__["launch_program_with_gdb"] = _wdissector.Options_launch_program_with_gdb_set
    __swig_getmethods__["launch_program_with_gdb"] = _wdissector.Options_launch_program_with_gdb_get
    if _newclass:
        launch_program_with_gdb = _swig_property(_wdissector.Options_launch_program_with_gdb_get, _wdissector.Options_launch_program_with_gdb_set)
    __swig_setmethods__["programs_list"] = _wdissector.Options_programs_list_set
    __swig_getmethods__["programs_list"] = _wdissector.Options_programs_list_get
    if _newclass:
        programs_list = _swig_property(_wdissector.Options_programs_list_get, _wdissector.Options_programs_list_set)
    __swig_setmethods__["main_thread_core"] = _wdissector.Options_main_thread_core_set
    __swig_getmethods__["main_thread_core"] = _wdissector.Options_main_thread_core_get
    if _newclass:
        main_thread_core = _swig_property(_wdissector.Options_main_thread_core_get, _wdissector.Options_main_thread_core_set)
    __swig_setmethods__["save_core_dump"] = _wdissector.Options_save_core_dump_set
    __swig_getmethods__["save_core_dump"] = _wdissector.Options_save_core_dump_get
    if _newclass:
        save_core_dump = _swig_property(_wdissector.Options_save_core_dump_get, _wdissector.Options_save_core_dump_set)

    def __init__(self):
        this = _wdissector.new_Options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Options
    __del__ = lambda self: None
Options_swigregister = _wdissector.Options_swigregister
Options_swigregister(Options)

class PythonApiServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonApiServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonApiServer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.PythonApiServer_enable_set
    __swig_getmethods__["enable"] = _wdissector.PythonApiServer_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.PythonApiServer_enable_get, _wdissector.PythonApiServer_enable_set)
    __swig_setmethods__["listen_address"] = _wdissector.PythonApiServer_listen_address_set
    __swig_getmethods__["listen_address"] = _wdissector.PythonApiServer_listen_address_get
    if _newclass:
        listen_address = _swig_property(_wdissector.PythonApiServer_listen_address_get, _wdissector.PythonApiServer_listen_address_set)
    __swig_setmethods__["port"] = _wdissector.PythonApiServer_port_set
    __swig_getmethods__["port"] = _wdissector.PythonApiServer_port_get
    if _newclass:
        port = _swig_property(_wdissector.PythonApiServer_port_get, _wdissector.PythonApiServer_port_set)
    __swig_setmethods__["api_namespace"] = _wdissector.PythonApiServer_api_namespace_set
    __swig_getmethods__["api_namespace"] = _wdissector.PythonApiServer_api_namespace_get
    if _newclass:
        api_namespace = _swig_property(_wdissector.PythonApiServer_api_namespace_get, _wdissector.PythonApiServer_api_namespace_set)
    __swig_setmethods__["enable_events"] = _wdissector.PythonApiServer_enable_events_set
    __swig_getmethods__["enable_events"] = _wdissector.PythonApiServer_enable_events_get
    if _newclass:
        enable_events = _swig_property(_wdissector.PythonApiServer_enable_events_get, _wdissector.PythonApiServer_enable_events_set)
    __swig_setmethods__["logging"] = _wdissector.PythonApiServer_logging_set
    __swig_getmethods__["logging"] = _wdissector.PythonApiServer_logging_get
    if _newclass:
        logging = _swig_property(_wdissector.PythonApiServer_logging_get, _wdissector.PythonApiServer_logging_set)
    __swig_setmethods__["server_module"] = _wdissector.PythonApiServer_server_module_set
    __swig_getmethods__["server_module"] = _wdissector.PythonApiServer_server_module_get
    if _newclass:
        server_module = _swig_property(_wdissector.PythonApiServer_server_module_get, _wdissector.PythonApiServer_server_module_set)
    __swig_setmethods__["server_modules_list"] = _wdissector.PythonApiServer_server_modules_list_set
    __swig_getmethods__["server_modules_list"] = _wdissector.PythonApiServer_server_modules_list_get
    if _newclass:
        server_modules_list = _swig_property(_wdissector.PythonApiServer_server_modules_list_get, _wdissector.PythonApiServer_server_modules_list_set)

    def __init__(self):
        this = _wdissector.new_PythonApiServer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_PythonApiServer
    __del__ = lambda self: None
PythonApiServer_swigregister = _wdissector.PythonApiServer_swigregister
PythonApiServer_swigregister(PythonApiServer)

class ReportModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _wdissector.ReportModule_enabled_set
    __swig_getmethods__["enabled"] = _wdissector.ReportModule_enabled_get
    if _newclass:
        enabled = _swig_property(_wdissector.ReportModule_enabled_get, _wdissector.ReportModule_enabled_set)
    __swig_setmethods__["type"] = _wdissector.ReportModule_type_set
    __swig_getmethods__["type"] = _wdissector.ReportModule_type_get
    if _newclass:
        type = _swig_property(_wdissector.ReportModule_type_get, _wdissector.ReportModule_type_set)
    __swig_setmethods__["script"] = _wdissector.ReportModule_script_set
    __swig_getmethods__["script"] = _wdissector.ReportModule_script_get
    if _newclass:
        script = _swig_property(_wdissector.ReportModule_script_get, _wdissector.ReportModule_script_set)
    __swig_setmethods__["credentials_file"] = _wdissector.ReportModule_credentials_file_set
    __swig_getmethods__["credentials_file"] = _wdissector.ReportModule_credentials_file_get
    if _newclass:
        credentials_file = _swig_property(_wdissector.ReportModule_credentials_file_get, _wdissector.ReportModule_credentials_file_set)
    __swig_setmethods__["only_errors"] = _wdissector.ReportModule_only_errors_set
    __swig_getmethods__["only_errors"] = _wdissector.ReportModule_only_errors_get
    if _newclass:
        only_errors = _swig_property(_wdissector.ReportModule_only_errors_get, _wdissector.ReportModule_only_errors_set)
    __swig_setmethods__["to"] = _wdissector.ReportModule_to_set
    __swig_getmethods__["to"] = _wdissector.ReportModule_to_get
    if _newclass:
        to = _swig_property(_wdissector.ReportModule_to_get, _wdissector.ReportModule_to_set)
    __swig_setmethods__["magic_words"] = _wdissector.ReportModule_magic_words_set
    __swig_getmethods__["magic_words"] = _wdissector.ReportModule_magic_words_get
    if _newclass:
        magic_words = _swig_property(_wdissector.ReportModule_magic_words_get, _wdissector.ReportModule_magic_words_set)

    def __init__(self):
        this = _wdissector.new_ReportModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_ReportModule
    __del__ = lambda self: None
ReportModule_swigregister = _wdissector.ReportModule_swigregister
ReportModule_swigregister(ReportModule)

class ReportsSender(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportsSender, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportsSender, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.ReportsSender_enable_set
    __swig_getmethods__["enable"] = _wdissector.ReportsSender_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.ReportsSender_enable_get, _wdissector.ReportsSender_enable_set)
    __swig_setmethods__["report_modules"] = _wdissector.ReportsSender_report_modules_set
    __swig_getmethods__["report_modules"] = _wdissector.ReportsSender_report_modules_get
    if _newclass:
        report_modules = _swig_property(_wdissector.ReportsSender_report_modules_get, _wdissector.ReportsSender_report_modules_set)

    def __init__(self):
        this = _wdissector.new_ReportsSender()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_ReportsSender
    __del__ = lambda self: None
ReportsSender_swigregister = _wdissector.ReportsSender_swigregister
ReportsSender_swigregister(ReportsSender)

class TShark(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TShark, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TShark, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.TShark_enable_set
    __swig_getmethods__["enable"] = _wdissector.TShark_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.TShark_enable_get, _wdissector.TShark_enable_set)
    __swig_setmethods__["interfaces_name"] = _wdissector.TShark_interfaces_name_set
    __swig_getmethods__["interfaces_name"] = _wdissector.TShark_interfaces_name_get
    if _newclass:
        interfaces_name = _swig_property(_wdissector.TShark_interfaces_name_get, _wdissector.TShark_interfaces_name_set)
    __swig_setmethods__["enable_display_filter"] = _wdissector.TShark_enable_display_filter_set
    __swig_getmethods__["enable_display_filter"] = _wdissector.TShark_enable_display_filter_get
    if _newclass:
        enable_display_filter = _swig_property(_wdissector.TShark_enable_display_filter_get, _wdissector.TShark_enable_display_filter_set)
    __swig_setmethods__["display_filter"] = _wdissector.TShark_display_filter_set
    __swig_getmethods__["display_filter"] = _wdissector.TShark_display_filter_get
    if _newclass:
        display_filter = _swig_property(_wdissector.TShark_display_filter_get, _wdissector.TShark_display_filter_set)
    __swig_setmethods__["use_tcp_dump_for_capture"] = _wdissector.TShark_use_tcp_dump_for_capture_set
    __swig_getmethods__["use_tcp_dump_for_capture"] = _wdissector.TShark_use_tcp_dump_for_capture_get
    if _newclass:
        use_tcp_dump_for_capture = _swig_property(_wdissector.TShark_use_tcp_dump_for_capture_get, _wdissector.TShark_use_tcp_dump_for_capture_set)

    def __init__(self):
        this = _wdissector.new_TShark()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_TShark
    __del__ = lambda self: None
TShark_swigregister = _wdissector.TShark_swigregister
TShark_swigregister(TShark)

class UeModemManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UeModemManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UeModemManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.UeModemManager_enable_set
    __swig_getmethods__["enable"] = _wdissector.UeModemManager_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.UeModemManager_enable_get, _wdissector.UeModemManager_enable_set)
    __swig_setmethods__["apn"] = _wdissector.UeModemManager_apn_set
    __swig_getmethods__["apn"] = _wdissector.UeModemManager_apn_get
    if _newclass:
        apn = _swig_property(_wdissector.UeModemManager_apn_get, _wdissector.UeModemManager_apn_set)
    __swig_setmethods__["allowed_modes"] = _wdissector.UeModemManager_allowed_modes_set
    __swig_getmethods__["allowed_modes"] = _wdissector.UeModemManager_allowed_modes_get
    if _newclass:
        allowed_modes = _swig_property(_wdissector.UeModemManager_allowed_modes_get, _wdissector.UeModemManager_allowed_modes_set)
    __swig_setmethods__["preferred_mode"] = _wdissector.UeModemManager_preferred_mode_set
    __swig_getmethods__["preferred_mode"] = _wdissector.UeModemManager_preferred_mode_get
    if _newclass:
        preferred_mode = _swig_property(_wdissector.UeModemManager_preferred_mode_get, _wdissector.UeModemManager_preferred_mode_set)
    __swig_setmethods__["bands"] = _wdissector.UeModemManager_bands_set
    __swig_getmethods__["bands"] = _wdissector.UeModemManager_bands_get
    if _newclass:
        bands = _swig_property(_wdissector.UeModemManager_bands_get, _wdissector.UeModemManager_bands_set)
    __swig_setmethods__["disable_fuzzing_on_first_connection"] = _wdissector.UeModemManager_disable_fuzzing_on_first_connection_set
    __swig_getmethods__["disable_fuzzing_on_first_connection"] = _wdissector.UeModemManager_disable_fuzzing_on_first_connection_get
    if _newclass:
        disable_fuzzing_on_first_connection = _swig_property(_wdissector.UeModemManager_disable_fuzzing_on_first_connection_get, _wdissector.UeModemManager_disable_fuzzing_on_first_connection_set)
    __swig_setmethods__["auto_connect_modem"] = _wdissector.UeModemManager_auto_connect_modem_set
    __swig_getmethods__["auto_connect_modem"] = _wdissector.UeModemManager_auto_connect_modem_get
    if _newclass:
        auto_connect_modem = _swig_property(_wdissector.UeModemManager_auto_connect_modem_get, _wdissector.UeModemManager_auto_connect_modem_set)
    __swig_setmethods__["connection_timeout_ms"] = _wdissector.UeModemManager_connection_timeout_ms_set
    __swig_getmethods__["connection_timeout_ms"] = _wdissector.UeModemManager_connection_timeout_ms_get
    if _newclass:
        connection_timeout_ms = _swig_property(_wdissector.UeModemManager_connection_timeout_ms_get, _wdissector.UeModemManager_connection_timeout_ms_set)
    __swig_setmethods__["use_only_at_connections"] = _wdissector.UeModemManager_use_only_at_connections_set
    __swig_getmethods__["use_only_at_connections"] = _wdissector.UeModemManager_use_only_at_connections_get
    if _newclass:
        use_only_at_connections = _swig_property(_wdissector.UeModemManager_use_only_at_connections_get, _wdissector.UeModemManager_use_only_at_connections_set)
    __swig_setmethods__["auto_connect_to_apn"] = _wdissector.UeModemManager_auto_connect_to_apn_set
    __swig_getmethods__["auto_connect_to_apn"] = _wdissector.UeModemManager_auto_connect_to_apn_get
    if _newclass:
        auto_connect_to_apn = _swig_property(_wdissector.UeModemManager_auto_connect_to_apn_get, _wdissector.UeModemManager_auto_connect_to_apn_set)
    __swig_setmethods__["manual_apn_connection"] = _wdissector.UeModemManager_manual_apn_connection_set
    __swig_getmethods__["manual_apn_connection"] = _wdissector.UeModemManager_manual_apn_connection_get
    if _newclass:
        manual_apn_connection = _swig_property(_wdissector.UeModemManager_manual_apn_connection_get, _wdissector.UeModemManager_manual_apn_connection_set)
    __swig_setmethods__["manual_apn_connection_delay_ms"] = _wdissector.UeModemManager_manual_apn_connection_delay_ms_set
    __swig_getmethods__["manual_apn_connection_delay_ms"] = _wdissector.UeModemManager_manual_apn_connection_delay_ms_get
    if _newclass:
        manual_apn_connection_delay_ms = _swig_property(_wdissector.UeModemManager_manual_apn_connection_delay_ms_get, _wdissector.UeModemManager_manual_apn_connection_delay_ms_set)
    __swig_setmethods__["auto_reconnect_modem"] = _wdissector.UeModemManager_auto_reconnect_modem_set
    __swig_getmethods__["auto_reconnect_modem"] = _wdissector.UeModemManager_auto_reconnect_modem_get
    if _newclass:
        auto_reconnect_modem = _swig_property(_wdissector.UeModemManager_auto_reconnect_modem_get, _wdissector.UeModemManager_auto_reconnect_modem_set)
    __swig_setmethods__["reset_modem_on_global_timeout"] = _wdissector.UeModemManager_reset_modem_on_global_timeout_set
    __swig_getmethods__["reset_modem_on_global_timeout"] = _wdissector.UeModemManager_reset_modem_on_global_timeout_get
    if _newclass:
        reset_modem_on_global_timeout = _swig_property(_wdissector.UeModemManager_reset_modem_on_global_timeout_get, _wdissector.UeModemManager_reset_modem_on_global_timeout_set)
    __swig_setmethods__["global_timeouts_count"] = _wdissector.UeModemManager_global_timeouts_count_set
    __swig_getmethods__["global_timeouts_count"] = _wdissector.UeModemManager_global_timeouts_count_get
    if _newclass:
        global_timeouts_count = _swig_property(_wdissector.UeModemManager_global_timeouts_count_get, _wdissector.UeModemManager_global_timeouts_count_set)
    __swig_setmethods__["default_modem_interface_path"] = _wdissector.UeModemManager_default_modem_interface_path_set
    __swig_getmethods__["default_modem_interface_path"] = _wdissector.UeModemManager_default_modem_interface_path_get
    if _newclass:
        default_modem_interface_path = _swig_property(_wdissector.UeModemManager_default_modem_interface_path_get, _wdissector.UeModemManager_default_modem_interface_path_set)
    __swig_setmethods__["auto_search_modem_interface_path"] = _wdissector.UeModemManager_auto_search_modem_interface_path_set
    __swig_getmethods__["auto_search_modem_interface_path"] = _wdissector.UeModemManager_auto_search_modem_interface_path_get
    if _newclass:
        auto_search_modem_interface_path = _swig_property(_wdissector.UeModemManager_auto_search_modem_interface_path_get, _wdissector.UeModemManager_auto_search_modem_interface_path_set)
    __swig_setmethods__["use_in_usbip_host_ssh"] = _wdissector.UeModemManager_use_in_usbip_host_ssh_set
    __swig_getmethods__["use_in_usbip_host_ssh"] = _wdissector.UeModemManager_use_in_usbip_host_ssh_get
    if _newclass:
        use_in_usbip_host_ssh = _swig_property(_wdissector.UeModemManager_use_in_usbip_host_ssh_get, _wdissector.UeModemManager_use_in_usbip_host_ssh_set)
    __swig_setmethods__["enable_adb"] = _wdissector.UeModemManager_enable_adb_set
    __swig_getmethods__["enable_adb"] = _wdissector.UeModemManager_enable_adb_get
    if _newclass:
        enable_adb = _swig_property(_wdissector.UeModemManager_enable_adb_get, _wdissector.UeModemManager_enable_adb_set)
    __swig_setmethods__["adb_device"] = _wdissector.UeModemManager_adb_device_set
    __swig_getmethods__["adb_device"] = _wdissector.UeModemManager_adb_device_get
    if _newclass:
        adb_device = _swig_property(_wdissector.UeModemManager_adb_device_get, _wdissector.UeModemManager_adb_device_set)
    __swig_setmethods__["adbpin"] = _wdissector.UeModemManager_adbpin_set
    __swig_getmethods__["adbpin"] = _wdissector.UeModemManager_adbpin_get
    if _newclass:
        adbpin = _swig_property(_wdissector.UeModemManager_adbpin_get, _wdissector.UeModemManager_adbpin_set)

    def __init__(self):
        this = _wdissector.new_UeModemManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_UeModemManager
    __del__ = lambda self: None
UeModemManager_swigregister = _wdissector.UeModemManager_swigregister
UeModemManager_swigregister(UeModemManager)

class UsbDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UsbDevice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _wdissector.UsbDevice_enabled_set
    __swig_getmethods__["enabled"] = _wdissector.UsbDevice_enabled_get
    if _newclass:
        enabled = _swig_property(_wdissector.UsbDevice_enabled_get, _wdissector.UsbDevice_enabled_set)
    __swig_setmethods__["name"] = _wdissector.UsbDevice_name_set
    __swig_getmethods__["name"] = _wdissector.UsbDevice_name_get
    if _newclass:
        name = _swig_property(_wdissector.UsbDevice_name_get, _wdissector.UsbDevice_name_set)
    __swig_setmethods__["vidpid"] = _wdissector.UsbDevice_vidpid_set
    __swig_getmethods__["vidpid"] = _wdissector.UsbDevice_vidpid_get
    if _newclass:
        vidpid = _swig_property(_wdissector.UsbDevice_vidpid_get, _wdissector.UsbDevice_vidpid_set)
    __swig_setmethods__["reset_on_program_startup"] = _wdissector.UsbDevice_reset_on_program_startup_set
    __swig_getmethods__["reset_on_program_startup"] = _wdissector.UsbDevice_reset_on_program_startup_get
    if _newclass:
        reset_on_program_startup = _swig_property(_wdissector.UsbDevice_reset_on_program_startup_get, _wdissector.UsbDevice_reset_on_program_startup_set)

    def __init__(self):
        this = _wdissector.new_UsbDevice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_UsbDevice
    __del__ = lambda self: None
UsbDevice_swigregister = _wdissector.UsbDevice_swigregister
UsbDevice_swigregister(UsbDevice)

class UsbHubControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbHubControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UsbHubControl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.UsbHubControl_enable_set
    __swig_getmethods__["enable"] = _wdissector.UsbHubControl_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.UsbHubControl_enable_get, _wdissector.UsbHubControl_enable_set)
    __swig_setmethods__["usb_devices"] = _wdissector.UsbHubControl_usb_devices_set
    __swig_getmethods__["usb_devices"] = _wdissector.UsbHubControl_usb_devices_get
    if _newclass:
        usb_devices = _swig_property(_wdissector.UsbHubControl_usb_devices_get, _wdissector.UsbHubControl_usb_devices_set)
    __swig_setmethods__["global_timeouts_count"] = _wdissector.UsbHubControl_global_timeouts_count_set
    __swig_getmethods__["global_timeouts_count"] = _wdissector.UsbHubControl_global_timeouts_count_get
    if _newclass:
        global_timeouts_count = _swig_property(_wdissector.UsbHubControl_global_timeouts_count_get, _wdissector.UsbHubControl_global_timeouts_count_set)
    __swig_setmethods__["toggle_power_delay_ms"] = _wdissector.UsbHubControl_toggle_power_delay_ms_set
    __swig_getmethods__["toggle_power_delay_ms"] = _wdissector.UsbHubControl_toggle_power_delay_ms_get
    if _newclass:
        toggle_power_delay_ms = _swig_property(_wdissector.UsbHubControl_toggle_power_delay_ms_get, _wdissector.UsbHubControl_toggle_power_delay_ms_set)
    __swig_setmethods__["use_in_usbip_host_ssh"] = _wdissector.UsbHubControl_use_in_usbip_host_ssh_set
    __swig_getmethods__["use_in_usbip_host_ssh"] = _wdissector.UsbHubControl_use_in_usbip_host_ssh_get
    if _newclass:
        use_in_usbip_host_ssh = _swig_property(_wdissector.UsbHubControl_use_in_usbip_host_ssh_get, _wdissector.UsbHubControl_use_in_usbip_host_ssh_set)

    def __init__(self):
        this = _wdissector.new_UsbHubControl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_UsbHubControl
    __del__ = lambda self: None
UsbHubControl_swigregister = _wdissector.UsbHubControl_swigregister
UsbHubControl_swigregister(UsbHubControl)

class HostSsh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostSsh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostSsh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.HostSsh_enable_set
    __swig_getmethods__["enable"] = _wdissector.HostSsh_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.HostSsh_enable_get, _wdissector.HostSsh_enable_set)
    __swig_setmethods__["username"] = _wdissector.HostSsh_username_set
    __swig_getmethods__["username"] = _wdissector.HostSsh_username_get
    if _newclass:
        username = _swig_property(_wdissector.HostSsh_username_get, _wdissector.HostSsh_username_set)
    __swig_setmethods__["password"] = _wdissector.HostSsh_password_set
    __swig_getmethods__["password"] = _wdissector.HostSsh_password_get
    if _newclass:
        password = _swig_property(_wdissector.HostSsh_password_get, _wdissector.HostSsh_password_set)
    __swig_setmethods__["port"] = _wdissector.HostSsh_port_set
    __swig_getmethods__["port"] = _wdissector.HostSsh_port_get
    if _newclass:
        port = _swig_property(_wdissector.HostSsh_port_get, _wdissector.HostSsh_port_set)
    __swig_setmethods__["unbind_on_exit"] = _wdissector.HostSsh_unbind_on_exit_set
    __swig_getmethods__["unbind_on_exit"] = _wdissector.HostSsh_unbind_on_exit_get
    if _newclass:
        unbind_on_exit = _swig_property(_wdissector.HostSsh_unbind_on_exit_get, _wdissector.HostSsh_unbind_on_exit_set)
    __swig_setmethods__["upload_folder"] = _wdissector.HostSsh_upload_folder_set
    __swig_getmethods__["upload_folder"] = _wdissector.HostSsh_upload_folder_get
    if _newclass:
        upload_folder = _swig_property(_wdissector.HostSsh_upload_folder_get, _wdissector.HostSsh_upload_folder_set)

    def __init__(self):
        this = _wdissector.new_HostSsh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_HostSsh
    __del__ = lambda self: None
HostSsh_swigregister = _wdissector.HostSsh_swigregister
HostSsh_swigregister(HostSsh)

class Usbip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Usbip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Usbip, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.Usbip_enable_set
    __swig_getmethods__["enable"] = _wdissector.Usbip_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.Usbip_enable_get, _wdissector.Usbip_enable_set)
    __swig_setmethods__["server_address"] = _wdissector.Usbip_server_address_set
    __swig_getmethods__["server_address"] = _wdissector.Usbip_server_address_get
    if _newclass:
        server_address = _swig_property(_wdissector.Usbip_server_address_get, _wdissector.Usbip_server_address_set)
    __swig_setmethods__["port"] = _wdissector.Usbip_port_set
    __swig_getmethods__["port"] = _wdissector.Usbip_port_get
    if _newclass:
        port = _swig_property(_wdissector.Usbip_port_get, _wdissector.Usbip_port_set)
    __swig_setmethods__["usb_devices"] = _wdissector.Usbip_usb_devices_set
    __swig_getmethods__["usb_devices"] = _wdissector.Usbip_usb_devices_get
    if _newclass:
        usb_devices = _swig_property(_wdissector.Usbip_usb_devices_get, _wdissector.Usbip_usb_devices_set)
    __swig_setmethods__["host_ssh"] = _wdissector.Usbip_host_ssh_set
    __swig_getmethods__["host_ssh"] = _wdissector.Usbip_host_ssh_get
    if _newclass:
        host_ssh = _swig_property(_wdissector.Usbip_host_ssh_get, _wdissector.Usbip_host_ssh_set)

    def __init__(self):
        this = _wdissector.new_Usbip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Usbip
    __del__ = lambda self: None
Usbip_swigregister = _wdissector.Usbip_swigregister
Usbip_swigregister(Usbip)

class Services(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Services, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Services, name)
    __repr__ = _swig_repr
    __swig_setmethods__["python_api_server"] = _wdissector.Services_python_api_server_set
    __swig_getmethods__["python_api_server"] = _wdissector.Services_python_api_server_get
    if _newclass:
        python_api_server = _swig_property(_wdissector.Services_python_api_server_get, _wdissector.Services_python_api_server_set)
    __swig_setmethods__["reports_sender"] = _wdissector.Services_reports_sender_set
    __swig_getmethods__["reports_sender"] = _wdissector.Services_reports_sender_get
    if _newclass:
        reports_sender = _swig_property(_wdissector.Services_reports_sender_get, _wdissector.Services_reports_sender_set)
    __swig_setmethods__["t_shark"] = _wdissector.Services_t_shark_set
    __swig_getmethods__["t_shark"] = _wdissector.Services_t_shark_get
    if _newclass:
        t_shark = _swig_property(_wdissector.Services_t_shark_get, _wdissector.Services_t_shark_set)
    __swig_setmethods__["ue_modem_manager"] = _wdissector.Services_ue_modem_manager_set
    __swig_getmethods__["ue_modem_manager"] = _wdissector.Services_ue_modem_manager_get
    if _newclass:
        ue_modem_manager = _swig_property(_wdissector.Services_ue_modem_manager_get, _wdissector.Services_ue_modem_manager_set)
    __swig_setmethods__["usb_hub_control"] = _wdissector.Services_usb_hub_control_set
    __swig_getmethods__["usb_hub_control"] = _wdissector.Services_usb_hub_control_get
    if _newclass:
        usb_hub_control = _swig_property(_wdissector.Services_usb_hub_control_get, _wdissector.Services_usb_hub_control_set)
    __swig_setmethods__["usbip"] = _wdissector.Services_usbip_set
    __swig_getmethods__["usbip"] = _wdissector.Services_usbip_get
    if _newclass:
        usbip = _swig_property(_wdissector.Services_usbip_get, _wdissector.Services_usbip_set)

    def __init__(self):
        this = _wdissector.new_Services()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Services
    __del__ = lambda self: None
Services_swigregister = _wdissector.Services_swigregister
Services_swigregister(Services)

class Mapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mapping, name)
    __repr__ = _swig_repr
    __swig_setmethods__["append_summary"] = _wdissector.Mapping_append_summary_set
    __swig_getmethods__["append_summary"] = _wdissector.Mapping_append_summary_get
    if _newclass:
        append_summary = _swig_property(_wdissector.Mapping_append_summary_get, _wdissector.Mapping_append_summary_set)
    __swig_setmethods__["filter"] = _wdissector.Mapping_filter_set
    __swig_getmethods__["filter"] = _wdissector.Mapping_filter_get
    if _newclass:
        filter = _swig_property(_wdissector.Mapping_filter_get, _wdissector.Mapping_filter_set)
    __swig_setmethods__["layer_name"] = _wdissector.Mapping_layer_name_set
    __swig_getmethods__["layer_name"] = _wdissector.Mapping_layer_name_get
    if _newclass:
        layer_name = _swig_property(_wdissector.Mapping_layer_name_get, _wdissector.Mapping_layer_name_set)
    __swig_setmethods__["state_name_field"] = _wdissector.Mapping_state_name_field_set
    __swig_getmethods__["state_name_field"] = _wdissector.Mapping_state_name_field_get
    if _newclass:
        state_name_field = _swig_property(_wdissector.Mapping_state_name_field_get, _wdissector.Mapping_state_name_field_set)

    def __init__(self):
        this = _wdissector.new_Mapping()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Mapping
    __del__ = lambda self: None
Mapping_swigregister = _wdissector.Mapping_swigregister
Mapping_swigregister(Mapping)

class Overrides(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Overrides, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Overrides, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _wdissector.new_Overrides()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Overrides
    __del__ = lambda self: None
Overrides_swigregister = _wdissector.Overrides_swigregister
Overrides_swigregister(Overrides)

class StateMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateMapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _wdissector.StateMapper_enable_set
    __swig_getmethods__["enable"] = _wdissector.StateMapper_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.StateMapper_enable_get, _wdissector.StateMapper_enable_set)
    __swig_setmethods__["packet_layer_offset"] = _wdissector.StateMapper_packet_layer_offset_set
    __swig_getmethods__["packet_layer_offset"] = _wdissector.StateMapper_packet_layer_offset_get
    if _newclass:
        packet_layer_offset = _swig_property(_wdissector.StateMapper_packet_layer_offset_get, _wdissector.StateMapper_packet_layer_offset_set)
    __swig_setmethods__["save_folder"] = _wdissector.StateMapper_save_folder_set
    __swig_getmethods__["save_folder"] = _wdissector.StateMapper_save_folder_get
    if _newclass:
        save_folder = _swig_property(_wdissector.StateMapper_save_folder_get, _wdissector.StateMapper_save_folder_set)
    __swig_setmethods__["show_all_states"] = _wdissector.StateMapper_show_all_states_set
    __swig_getmethods__["show_all_states"] = _wdissector.StateMapper_show_all_states_get
    if _newclass:
        show_all_states = _swig_property(_wdissector.StateMapper_show_all_states_get, _wdissector.StateMapper_show_all_states_set)
    __swig_setmethods__["pcap_pseudo_header_direction_offset"] = _wdissector.StateMapper_pcap_pseudo_header_direction_offset_set
    __swig_getmethods__["pcap_pseudo_header_direction_offset"] = _wdissector.StateMapper_pcap_pseudo_header_direction_offset_get
    if _newclass:
        pcap_pseudo_header_direction_offset = _swig_property(_wdissector.StateMapper_pcap_pseudo_header_direction_offset_get, _wdissector.StateMapper_pcap_pseudo_header_direction_offset_set)
    __swig_setmethods__["ignore_malformed_packets"] = _wdissector.StateMapper_ignore_malformed_packets_set
    __swig_getmethods__["ignore_malformed_packets"] = _wdissector.StateMapper_ignore_malformed_packets_get
    if _newclass:
        ignore_malformed_packets = _swig_property(_wdissector.StateMapper_ignore_malformed_packets_get, _wdissector.StateMapper_ignore_malformed_packets_set)
    __swig_setmethods__["mapping"] = _wdissector.StateMapper_mapping_set
    __swig_getmethods__["mapping"] = _wdissector.StateMapper_mapping_get
    if _newclass:
        mapping = _swig_property(_wdissector.StateMapper_mapping_get, _wdissector.StateMapper_mapping_set)
    __swig_setmethods__["overrides"] = _wdissector.StateMapper_overrides_set
    __swig_getmethods__["overrides"] = _wdissector.StateMapper_overrides_get
    if _newclass:
        overrides = _swig_property(_wdissector.StateMapper_overrides_get, _wdissector.StateMapper_overrides_set)

    def __init__(self):
        this = _wdissector.new_StateMapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_StateMapper
    __del__ = lambda self: None
StateMapper_swigregister = _wdissector.StateMapper_swigregister
StateMapper_swigregister(StateMapper)

class CommonRejection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommonRejection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommonRejection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["description"] = _wdissector.CommonRejection_description_set
    __swig_getmethods__["description"] = _wdissector.CommonRejection_description_get
    if _newclass:
        description = _swig_property(_wdissector.CommonRejection_description_get, _wdissector.CommonRejection_description_set)
    __swig_setmethods__["filter"] = _wdissector.CommonRejection_filter_set
    __swig_getmethods__["filter"] = _wdissector.CommonRejection_filter_get
    if _newclass:
        filter = _swig_property(_wdissector.CommonRejection_filter_get, _wdissector.CommonRejection_filter_set)

    def __init__(self):
        this = _wdissector.new_CommonRejection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_CommonRejection
    __del__ = lambda self: None
CommonRejection_swigregister = _wdissector.CommonRejection_swigregister
CommonRejection_swigregister(CommonRejection)

class Validation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Validation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Validation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["common_rejections"] = _wdissector.Validation_common_rejections_set
    __swig_getmethods__["common_rejections"] = _wdissector.Validation_common_rejections_get
    if _newclass:
        common_rejections = _swig_property(_wdissector.Validation_common_rejections_get, _wdissector.Validation_common_rejections_set)
    __swig_setmethods__["default_fragments_layer"] = _wdissector.Validation_default_fragments_layer_set
    __swig_getmethods__["default_fragments_layer"] = _wdissector.Validation_default_fragments_layer_get
    if _newclass:
        default_fragments_layer = _swig_property(_wdissector.Validation_default_fragments_layer_get, _wdissector.Validation_default_fragments_layer_set)
    __swig_setmethods__["default_packet_layer"] = _wdissector.Validation_default_packet_layer_set
    __swig_getmethods__["default_packet_layer"] = _wdissector.Validation_default_packet_layer_get
    if _newclass:
        default_packet_layer = _swig_property(_wdissector.Validation_default_packet_layer_get, _wdissector.Validation_default_packet_layer_set)
    __swig_setmethods__["initial_state"] = _wdissector.Validation_initial_state_set
    __swig_getmethods__["initial_state"] = _wdissector.Validation_initial_state_get
    if _newclass:
        initial_state = _swig_property(_wdissector.Validation_initial_state_get, _wdissector.Validation_initial_state_set)

    def __init__(self):
        this = _wdissector.new_Validation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Validation
    __del__ = lambda self: None
Validation_swigregister = _wdissector.Validation_swigregister
Validation_swigregister(Validation)

class Wifi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wifi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wifi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wifi_interface"] = _wdissector.Wifi_wifi_interface_set
    __swig_getmethods__["wifi_interface"] = _wdissector.Wifi_wifi_interface_get
    if _newclass:
        wifi_interface = _swig_property(_wdissector.Wifi_wifi_interface_get, _wdissector.Wifi_wifi_interface_set)
    __swig_setmethods__["wifi_ssid"] = _wdissector.Wifi_wifi_ssid_set
    __swig_getmethods__["wifi_ssid"] = _wdissector.Wifi_wifi_ssid_get
    if _newclass:
        wifi_ssid = _swig_property(_wdissector.Wifi_wifi_ssid_get, _wdissector.Wifi_wifi_ssid_set)
    __swig_setmethods__["wifi_password"] = _wdissector.Wifi_wifi_password_set
    __swig_getmethods__["wifi_password"] = _wdissector.Wifi_wifi_password_get
    if _newclass:
        wifi_password = _swig_property(_wdissector.Wifi_wifi_password_get, _wdissector.Wifi_wifi_password_set)
    __swig_setmethods__["wifi_channel"] = _wdissector.Wifi_wifi_channel_set
    __swig_getmethods__["wifi_channel"] = _wdissector.Wifi_wifi_channel_get
    if _newclass:
        wifi_channel = _swig_property(_wdissector.Wifi_wifi_channel_get, _wdissector.Wifi_wifi_channel_set)
    __swig_setmethods__["wifi_key_auth"] = _wdissector.Wifi_wifi_key_auth_set
    __swig_getmethods__["wifi_key_auth"] = _wdissector.Wifi_wifi_key_auth_get
    if _newclass:
        wifi_key_auth = _swig_property(_wdissector.Wifi_wifi_key_auth_get, _wdissector.Wifi_wifi_key_auth_set)
    __swig_setmethods__["wifi_key_auth_list"] = _wdissector.Wifi_wifi_key_auth_list_set
    __swig_getmethods__["wifi_key_auth_list"] = _wdissector.Wifi_wifi_key_auth_list_get
    if _newclass:
        wifi_key_auth_list = _swig_property(_wdissector.Wifi_wifi_key_auth_list_get, _wdissector.Wifi_wifi_key_auth_list_set)
    __swig_setmethods__["wifi_rsn_crypto"] = _wdissector.Wifi_wifi_rsn_crypto_set
    __swig_getmethods__["wifi_rsn_crypto"] = _wdissector.Wifi_wifi_rsn_crypto_get
    if _newclass:
        wifi_rsn_crypto = _swig_property(_wdissector.Wifi_wifi_rsn_crypto_get, _wdissector.Wifi_wifi_rsn_crypto_set)
    __swig_setmethods__["wifi_rsn_crypto_list"] = _wdissector.Wifi_wifi_rsn_crypto_list_set
    __swig_getmethods__["wifi_rsn_crypto_list"] = _wdissector.Wifi_wifi_rsn_crypto_list_get
    if _newclass:
        wifi_rsn_crypto_list = _swig_property(_wdissector.Wifi_wifi_rsn_crypto_list_get, _wdissector.Wifi_wifi_rsn_crypto_list_set)
    __swig_setmethods__["wifi_username"] = _wdissector.Wifi_wifi_username_set
    __swig_getmethods__["wifi_username"] = _wdissector.Wifi_wifi_username_get
    if _newclass:
        wifi_username = _swig_property(_wdissector.Wifi_wifi_username_get, _wdissector.Wifi_wifi_username_set)
    __swig_setmethods__["wifi_eap_method"] = _wdissector.Wifi_wifi_eap_method_set
    __swig_getmethods__["wifi_eap_method"] = _wdissector.Wifi_wifi_eap_method_get
    if _newclass:
        wifi_eap_method = _swig_property(_wdissector.Wifi_wifi_eap_method_get, _wdissector.Wifi_wifi_eap_method_set)
    __swig_setmethods__["wifi_eap_method_list"] = _wdissector.Wifi_wifi_eap_method_list_set
    __swig_getmethods__["wifi_eap_method_list"] = _wdissector.Wifi_wifi_eap_method_list_get
    if _newclass:
        wifi_eap_method_list = _swig_property(_wdissector.Wifi_wifi_eap_method_list_get, _wdissector.Wifi_wifi_eap_method_list_set)
    __swig_setmethods__["wifi_allow_internet"] = _wdissector.Wifi_wifi_allow_internet_set
    __swig_getmethods__["wifi_allow_internet"] = _wdissector.Wifi_wifi_allow_internet_get
    if _newclass:
        wifi_allow_internet = _swig_property(_wdissector.Wifi_wifi_allow_internet_get, _wdissector.Wifi_wifi_allow_internet_set)
    __swig_setmethods__["wifi_dhcp"] = _wdissector.Wifi_wifi_dhcp_set
    __swig_getmethods__["wifi_dhcp"] = _wdissector.Wifi_wifi_dhcp_get
    if _newclass:
        wifi_dhcp = _swig_property(_wdissector.Wifi_wifi_dhcp_get, _wdissector.Wifi_wifi_dhcp_set)
    __swig_setmethods__["wifi_dhcp_gateway_address"] = _wdissector.Wifi_wifi_dhcp_gateway_address_set
    __swig_getmethods__["wifi_dhcp_gateway_address"] = _wdissector.Wifi_wifi_dhcp_gateway_address_get
    if _newclass:
        wifi_dhcp_gateway_address = _swig_property(_wdissector.Wifi_wifi_dhcp_gateway_address_get, _wdissector.Wifi_wifi_dhcp_gateway_address_set)
    __swig_setmethods__["wifi802_11_w"] = _wdissector.Wifi_wifi802_11_w_set
    __swig_getmethods__["wifi802_11_w"] = _wdissector.Wifi_wifi802_11_w_get
    if _newclass:
        wifi802_11_w = _swig_property(_wdissector.Wifi_wifi802_11_w_get, _wdissector.Wifi_wifi802_11_w_set)
    __swig_setmethods__["wifi_country_code"] = _wdissector.Wifi_wifi_country_code_set
    __swig_getmethods__["wifi_country_code"] = _wdissector.Wifi_wifi_country_code_get
    if _newclass:
        wifi_country_code = _swig_property(_wdissector.Wifi_wifi_country_code_get, _wdissector.Wifi_wifi_country_code_set)

    def __init__(self):
        this = _wdissector.new_Wifi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Wifi
    __del__ = lambda self: None
Wifi_swigregister = _wdissector.Wifi_swigregister
Wifi_swigregister(Wifi)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _wdissector.Config_name_set
    __swig_getmethods__["name"] = _wdissector.Config_name_get
    if _newclass:
        name = _swig_property(_wdissector.Config_name_get, _wdissector.Config_name_set)
    __swig_setmethods__["options"] = _wdissector.Config_options_set
    __swig_getmethods__["options"] = _wdissector.Config_options_get
    if _newclass:
        options = _swig_property(_wdissector.Config_options_get, _wdissector.Config_options_set)
    __swig_setmethods__["bluetooth"] = _wdissector.Config_bluetooth_set
    __swig_getmethods__["bluetooth"] = _wdissector.Config_bluetooth_get
    if _newclass:
        bluetooth = _swig_property(_wdissector.Config_bluetooth_get, _wdissector.Config_bluetooth_set)
    __swig_setmethods__["wifi"] = _wdissector.Config_wifi_set
    __swig_getmethods__["wifi"] = _wdissector.Config_wifi_get
    if _newclass:
        wifi = _swig_property(_wdissector.Config_wifi_get, _wdissector.Config_wifi_set)
    __swig_setmethods__["nr5_g"] = _wdissector.Config_nr5_g_set
    __swig_getmethods__["nr5_g"] = _wdissector.Config_nr5_g_get
    if _newclass:
        nr5_g = _swig_property(_wdissector.Config_nr5_g_get, _wdissector.Config_nr5_g_set)
    __swig_setmethods__["fuzzing"] = _wdissector.Config_fuzzing_set
    __swig_getmethods__["fuzzing"] = _wdissector.Config_fuzzing_get
    if _newclass:
        fuzzing = _swig_property(_wdissector.Config_fuzzing_get, _wdissector.Config_fuzzing_set)
    __swig_setmethods__["state_mapper"] = _wdissector.Config_state_mapper_set
    __swig_getmethods__["state_mapper"] = _wdissector.Config_state_mapper_get
    if _newclass:
        state_mapper = _swig_property(_wdissector.Config_state_mapper_get, _wdissector.Config_state_mapper_set)
    __swig_setmethods__["validation"] = _wdissector.Config_validation_set
    __swig_getmethods__["validation"] = _wdissector.Config_validation_get
    if _newclass:
        validation = _swig_property(_wdissector.Config_validation_get, _wdissector.Config_validation_set)
    __swig_setmethods__["monitor"] = _wdissector.Config_monitor_set
    __swig_getmethods__["monitor"] = _wdissector.Config_monitor_get
    if _newclass:
        monitor = _swig_property(_wdissector.Config_monitor_get, _wdissector.Config_monitor_set)
    __swig_setmethods__["services"] = _wdissector.Config_services_set
    __swig_getmethods__["services"] = _wdissector.Config_services_get
    if _newclass:
        services = _swig_property(_wdissector.Config_services_get, _wdissector.Config_services_set)

    def __init__(self):
        this = _wdissector.new_Config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_Config
    __del__ = lambda self: None
Config_swigregister = _wdissector.Config_swigregister
Config_swigregister(Config)

class GlobalConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["config"] = _wdissector.GlobalConfig_config_set
    __swig_getmethods__["config"] = _wdissector.GlobalConfig_config_get
    if _newclass:
        config = _swig_property(_wdissector.GlobalConfig_config_get, _wdissector.GlobalConfig_config_set)

    def __init__(self):
        this = _wdissector.new_GlobalConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_GlobalConfig
    __del__ = lambda self: None
GlobalConfig_swigregister = _wdissector.GlobalConfig_swigregister
GlobalConfig_swigregister(GlobalConfig)


def from_json(*args):
    return _wdissector.from_json(*args)
from_json = _wdissector.from_json

def to_json(*args):
    return _wdissector.to_json(*args)
to_json = _wdissector.to_json
class state_mapper_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_mapper_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_mapper_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer_name"] = _wdissector.state_mapper_t_layer_name_set
    __swig_getmethods__["layer_name"] = _wdissector.state_mapper_t_layer_name_get
    if _newclass:
        layer_name = _swig_property(_wdissector.state_mapper_t_layer_name_get, _wdissector.state_mapper_t_layer_name_set)
    __swig_setmethods__["filter"] = _wdissector.state_mapper_t_filter_set
    __swig_getmethods__["filter"] = _wdissector.state_mapper_t_filter_get
    if _newclass:
        filter = _swig_property(_wdissector.state_mapper_t_filter_get, _wdissector.state_mapper_t_filter_set)
    __swig_setmethods__["filter_compiled"] = _wdissector.state_mapper_t_filter_compiled_set
    __swig_getmethods__["filter_compiled"] = _wdissector.state_mapper_t_filter_compiled_get
    if _newclass:
        filter_compiled = _swig_property(_wdissector.state_mapper_t_filter_compiled_get, _wdissector.state_mapper_t_filter_compiled_set)
    __swig_setmethods__["state_field_name"] = _wdissector.state_mapper_t_state_field_name_set
    __swig_getmethods__["state_field_name"] = _wdissector.state_mapper_t_state_field_name_get
    if _newclass:
        state_field_name = _swig_property(_wdissector.state_mapper_t_state_field_name_get, _wdissector.state_mapper_t_state_field_name_set)
    __swig_setmethods__["state_field_header"] = _wdissector.state_mapper_t_state_field_header_set
    __swig_getmethods__["state_field_header"] = _wdissector.state_mapper_t_state_field_header_get
    if _newclass:
        state_field_header = _swig_property(_wdissector.state_mapper_t_state_field_header_get, _wdissector.state_mapper_t_state_field_header_set)
    __swig_setmethods__["append_summary"] = _wdissector.state_mapper_t_append_summary_set
    __swig_getmethods__["append_summary"] = _wdissector.state_mapper_t_append_summary_get
    if _newclass:
        append_summary = _swig_property(_wdissector.state_mapper_t_append_summary_get, _wdissector.state_mapper_t_append_summary_set)
    __swig_setmethods__["total_mapped_states"] = _wdissector.state_mapper_t_total_mapped_states_set
    __swig_getmethods__["total_mapped_states"] = _wdissector.state_mapper_t_total_mapped_states_get
    if _newclass:
        total_mapped_states = _swig_property(_wdissector.state_mapper_t_total_mapped_states_get, _wdissector.state_mapper_t_total_mapped_states_set)
    __swig_setmethods__["total_mapped_transitions"] = _wdissector.state_mapper_t_total_mapped_transitions_set
    __swig_getmethods__["total_mapped_transitions"] = _wdissector.state_mapper_t_total_mapped_transitions_get
    if _newclass:
        total_mapped_transitions = _swig_property(_wdissector.state_mapper_t_total_mapped_transitions_get, _wdissector.state_mapper_t_total_mapped_transitions_set)
    __swig_setmethods__["idx"] = _wdissector.state_mapper_t_idx_set
    __swig_getmethods__["idx"] = _wdissector.state_mapper_t_idx_get
    if _newclass:
        idx = _swig_property(_wdissector.state_mapper_t_idx_get, _wdissector.state_mapper_t_idx_set)

    def __init__(self):
        this = _wdissector.new_state_mapper_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_state_mapper_t
    __del__ = lambda self: None
state_mapper_t_swigregister = _wdissector.state_mapper_t_swigregister
state_mapper_t_swigregister(state_mapper_t)

class exclude_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, exclude_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, exclude_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry"] = _wdissector.exclude_t_entry_set
    __swig_getmethods__["entry"] = _wdissector.exclude_t_entry_get
    if _newclass:
        entry = _swig_property(_wdissector.exclude_t_entry_get, _wdissector.exclude_t_entry_set)
    __swig_setmethods__["filter_compiled"] = _wdissector.exclude_t_filter_compiled_set
    __swig_getmethods__["filter_compiled"] = _wdissector.exclude_t_filter_compiled_get
    if _newclass:
        filter_compiled = _swig_property(_wdissector.exclude_t_filter_compiled_get, _wdissector.exclude_t_filter_compiled_set)
    __swig_setmethods__["exclude_flag"] = _wdissector.exclude_t_exclude_flag_set
    __swig_getmethods__["exclude_flag"] = _wdissector.exclude_t_exclude_flag_get
    if _newclass:
        exclude_flag = _swig_property(_wdissector.exclude_t_exclude_flag_get, _wdissector.exclude_t_exclude_flag_set)

    def __init__(self):
        this = _wdissector.new_exclude_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_exclude_t
    __del__ = lambda self: None
exclude_t_swigregister = _wdissector.exclude_t_swigregister
exclude_t_swigregister(exclude_t)

class state_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _wdissector.state_t_name_set
    __swig_getmethods__["name"] = _wdissector.state_t_name_get
    if _newclass:
        name = _swig_property(_wdissector.state_t_name_get, _wdissector.state_t_name_set)
    __swig_setmethods__["node"] = _wdissector.state_t_node_set
    __swig_getmethods__["node"] = _wdissector.state_t_node_get
    if _newclass:
        node = _swig_property(_wdissector.state_t_node_get, _wdissector.state_t_node_set)
    __swig_setmethods__["node_number"] = _wdissector.state_t_node_number_set
    __swig_getmethods__["node_number"] = _wdissector.state_t_node_number_get
    if _newclass:
        node_number = _swig_property(_wdissector.state_t_node_number_get, _wdissector.state_t_node_number_set)
    __swig_setmethods__["time"] = _wdissector.state_t_time_set
    __swig_getmethods__["time"] = _wdissector.state_t_time_get
    if _newclass:
        time = _swig_property(_wdissector.state_t_time_get, _wdissector.state_t_time_set)
    __swig_setmethods__["type_value"] = _wdissector.state_t_type_value_set
    __swig_getmethods__["type_value"] = _wdissector.state_t_type_value_get
    if _newclass:
        type_value = _swig_property(_wdissector.state_t_type_value_get, _wdissector.state_t_type_value_set)
    __swig_setmethods__["timeout"] = _wdissector.state_t_timeout_set
    __swig_getmethods__["timeout"] = _wdissector.state_t_timeout_get
    if _newclass:
        timeout = _swig_property(_wdissector.state_t_timeout_get, _wdissector.state_t_timeout_set)
    __swig_setmethods__["direction"] = _wdissector.state_t_direction_set
    __swig_getmethods__["direction"] = _wdissector.state_t_direction_get
    if _newclass:
        direction = _swig_property(_wdissector.state_t_direction_get, _wdissector.state_t_direction_set)
    __swig_setmethods__["layers_count"] = _wdissector.state_t_layers_count_set
    __swig_getmethods__["layers_count"] = _wdissector.state_t_layers_count_get
    if _newclass:
        layers_count = _swig_property(_wdissector.state_t_layers_count_get, _wdissector.state_t_layers_count_set)
    __swig_setmethods__["on_timeout"] = _wdissector.state_t_on_timeout_set
    __swig_getmethods__["on_timeout"] = _wdissector.state_t_on_timeout_get
    if _newclass:
        on_timeout = _swig_property(_wdissector.state_t_on_timeout_get, _wdissector.state_t_on_timeout_set)
    __swig_setmethods__["smt"] = _wdissector.state_t_smt_set
    __swig_getmethods__["smt"] = _wdissector.state_t_smt_get
    if _newclass:
        smt = _swig_property(_wdissector.state_t_smt_get, _wdissector.state_t_smt_set)
    __swig_setmethods__["mapping_idx"] = _wdissector.state_t_mapping_idx_set
    __swig_getmethods__["mapping_idx"] = _wdissector.state_t_mapping_idx_get
    if _newclass:
        mapping_idx = _swig_property(_wdissector.state_t_mapping_idx_get, _wdissector.state_t_mapping_idx_set)
    __swig_setmethods__["global_layer_offset"] = _wdissector.state_t_global_layer_offset_set
    __swig_getmethods__["global_layer_offset"] = _wdissector.state_t_global_layer_offset_get
    if _newclass:
        global_layer_offset = _swig_property(_wdissector.state_t_global_layer_offset_get, _wdissector.state_t_global_layer_offset_set)
    __swig_setmethods__["on_enter_state"] = _wdissector.state_t_on_enter_state_set
    __swig_getmethods__["on_enter_state"] = _wdissector.state_t_on_enter_state_get
    if _newclass:
        on_enter_state = _swig_property(_wdissector.state_t_on_enter_state_get, _wdissector.state_t_on_enter_state_set)
    __swig_setmethods__["on_exit_state"] = _wdissector.state_t_on_exit_state_set
    __swig_getmethods__["on_exit_state"] = _wdissector.state_t_on_exit_state_get
    if _newclass:
        on_exit_state = _swig_property(_wdissector.state_t_on_exit_state_get, _wdissector.state_t_on_exit_state_set)
    __swig_setmethods__["on_timeout_fcn"] = _wdissector.state_t_on_timeout_fcn_set
    __swig_getmethods__["on_timeout_fcn"] = _wdissector.state_t_on_timeout_fcn_get
    if _newclass:
        on_timeout_fcn = _swig_property(_wdissector.state_t_on_timeout_fcn_get, _wdissector.state_t_on_timeout_fcn_set)

    def __init__(self):
        this = _wdissector.new_state_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_state_t
    __del__ = lambda self: None
state_t_swigregister = _wdissector.state_t_swigregister
state_t_swigregister(state_t)

class transition_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transition_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transition_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["trigger"] = _wdissector.transition_t_trigger_set
    __swig_getmethods__["trigger"] = _wdissector.transition_t_trigger_get
    if _newclass:
        trigger = _swig_property(_wdissector.transition_t_trigger_get, _wdissector.transition_t_trigger_set)
    __swig_setmethods__["src_state"] = _wdissector.transition_t_src_state_set
    __swig_getmethods__["src_state"] = _wdissector.transition_t_src_state_get
    if _newclass:
        src_state = _swig_property(_wdissector.transition_t_src_state_get, _wdissector.transition_t_src_state_set)
    __swig_setmethods__["dst_state"] = _wdissector.transition_t_dst_state_set
    __swig_getmethods__["dst_state"] = _wdissector.transition_t_dst_state_get
    if _newclass:
        dst_state = _swig_property(_wdissector.transition_t_dst_state_get, _wdissector.transition_t_dst_state_set)
    __swig_setmethods__["src_state_name"] = _wdissector.transition_t_src_state_name_set
    __swig_getmethods__["src_state_name"] = _wdissector.transition_t_src_state_name_get
    if _newclass:
        src_state_name = _swig_property(_wdissector.transition_t_src_state_name_get, _wdissector.transition_t_src_state_name_set)
    __swig_setmethods__["dst_state_name"] = _wdissector.transition_t_dst_state_name_set
    __swig_getmethods__["dst_state_name"] = _wdissector.transition_t_dst_state_name_get
    if _newclass:
        dst_state_name = _swig_property(_wdissector.transition_t_dst_state_name_get, _wdissector.transition_t_dst_state_name_set)
    __swig_setmethods__["time"] = _wdissector.transition_t_time_set
    __swig_getmethods__["time"] = _wdissector.transition_t_time_get
    if _newclass:
        time = _swig_property(_wdissector.transition_t_time_get, _wdissector.transition_t_time_set)
    __swig_setmethods__["edge"] = _wdissector.transition_t_edge_set
    __swig_getmethods__["edge"] = _wdissector.transition_t_edge_get
    if _newclass:
        edge = _swig_property(_wdissector.transition_t_edge_get, _wdissector.transition_t_edge_set)

    def __init__(self):
        this = _wdissector.new_transition_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_transition_t
    __del__ = lambda self: None
transition_t_swigregister = _wdissector.transition_t_swigregister
transition_t_swigregister(transition_t)

class transition_table_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transition_table_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transition_table_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["to_state"] = _wdissector.transition_table_t_to_state_set
    __swig_getmethods__["to_state"] = _wdissector.transition_table_t_to_state_get
    if _newclass:
        to_state = _swig_property(_wdissector.transition_table_t_to_state_get, _wdissector.transition_table_t_to_state_set)
    __swig_setmethods__["from_state"] = _wdissector.transition_table_t_from_state_set
    __swig_getmethods__["from_state"] = _wdissector.transition_table_t_from_state_get
    if _newclass:
        from_state = _swig_property(_wdissector.transition_table_t_from_state_get, _wdissector.transition_table_t_from_state_set)

    def __init__(self):
        this = _wdissector.new_transition_table_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_transition_table_t
    __del__ = lambda self: None
transition_table_t_swigregister = _wdissector.transition_table_t_swigregister
transition_table_t_swigregister(transition_table_t)

class Machine(GlobalConfig):
    __swig_setmethods__ = {}
    for _s in [GlobalConfig]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Machine, name, value)
    __swig_getmethods__ = {}
    for _s in [GlobalConfig]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Machine, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _wdissector.new_Machine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    EXCLUDE_ALL = _wdissector.Machine_EXCLUDE_ALL
    EXCLUDE_MUTATION = _wdissector.Machine_EXCLUDE_MUTATION
    EXCLUDE_DUPLICATION = _wdissector.Machine_EXCLUDE_DUPLICATION
    EXCLUDE_VALIDATION = _wdissector.Machine_EXCLUDE_VALIDATION
    EXCLUDE_MAPPING = _wdissector.Machine_EXCLUDE_MAPPING
    EXCLUDE_RETRY = _wdissector.Machine_EXCLUDE_RETRY
    LD_MALFORMED_RECEPTION = _wdissector.Machine_LD_MALFORMED_RECEPTION
    LD_SAME_STATE_LOOP = _wdissector.Machine_LD_SAME_STATE_LOOP
    LD_DEADLOCK_CYCLE = _wdissector.Machine_LD_DEADLOCK_CYCLE
    __swig_setmethods__["wd"] = _wdissector.Machine_wd_set
    __swig_getmethods__["wd"] = _wdissector.Machine_wd_get
    if _newclass:
        wd = _swig_property(_wdissector.Machine_wd_get, _wdissector.Machine_wd_set)
    __swig_setmethods__["DissectedStateName"] = _wdissector.Machine_DissectedStateName_set
    __swig_getmethods__["DissectedStateName"] = _wdissector.Machine_DissectedStateName_get
    if _newclass:
        DissectedStateName = _swig_property(_wdissector.Machine_DissectedStateName_get, _wdissector.Machine_DissectedStateName_set)
    __swig_setmethods__["DissectedStateFieldName"] = _wdissector.Machine_DissectedStateFieldName_set
    __swig_getmethods__["DissectedStateFieldName"] = _wdissector.Machine_DissectedStateFieldName_get
    if _newclass:
        DissectedStateFieldName = _swig_property(_wdissector.Machine_DissectedStateFieldName_get, _wdissector.Machine_DissectedStateFieldName_set)
    __swig_setmethods__["DissectedStateFieldValue"] = _wdissector.Machine_DissectedStateFieldValue_set
    __swig_getmethods__["DissectedStateFieldValue"] = _wdissector.Machine_DissectedStateFieldValue_get
    if _newclass:
        DissectedStateFieldValue = _swig_property(_wdissector.Machine_DissectedStateFieldValue_get, _wdissector.Machine_DissectedStateFieldValue_set)
    __swig_setmethods__["CurrentExclude"] = _wdissector.Machine_CurrentExclude_set
    __swig_getmethods__["CurrentExclude"] = _wdissector.Machine_CurrentExclude_get
    if _newclass:
        CurrentExclude = _swig_property(_wdissector.Machine_CurrentExclude_get, _wdissector.Machine_CurrentExclude_set)
    __swig_setmethods__["MachineGraph"] = _wdissector.Machine_MachineGraph_set
    __swig_getmethods__["MachineGraph"] = _wdissector.Machine_MachineGraph_get
    if _newclass:
        MachineGraph = _swig_property(_wdissector.Machine_MachineGraph_get, _wdissector.Machine_MachineGraph_set)
    __swig_setmethods__["stats_transitions"] = _wdissector.Machine_stats_transitions_set
    __swig_getmethods__["stats_transitions"] = _wdissector.Machine_stats_transitions_get
    if _newclass:
        stats_transitions = _swig_property(_wdissector.Machine_stats_transitions_get, _wdissector.Machine_stats_transitions_set)
    __swig_setmethods__["stats_known_transitions"] = _wdissector.Machine_stats_known_transitions_set
    __swig_getmethods__["stats_known_transitions"] = _wdissector.Machine_stats_known_transitions_get
    if _newclass:
        stats_known_transitions = _swig_property(_wdissector.Machine_stats_known_transitions_get, _wdissector.Machine_stats_known_transitions_set)

    def init(self, config_file, _load_default_config=False):
        return _wdissector.Machine_init(self, config_file, _load_default_config)

    def InitStateMapper(self):
        return _wdissector.Machine_InitStateMapper(self)

    def InitExcludes(self):
        return _wdissector.Machine_InitExcludes(self)

    def PrepareExcludes(self, *args):
        return _wdissector.Machine_PrepareExcludes(self, *args)

    def RunExcludes(self, *args):
        return _wdissector.Machine_RunExcludes(self, *args)

    def AddState(self, state_name, value, direction=0, layers_count=0, smt=None, timeout=0, enter_cb=None, exit_cb=None, timeout_cb=None):
        return _wdissector.Machine_AddState(self, state_name, value, direction, layers_count, smt, timeout, enter_cb, exit_cb, timeout_cb)

    def AddTransition(self, *args):
        return _wdissector.Machine_AddTransition(self, *args)

    def Transition(self, dst_state_name, auto_add_transition=False, no_events=False, no_color_change=False):
        return _wdissector.Machine_Transition(self, dst_state_name, auto_add_transition, no_events, no_color_change)

    def PrepareStateMapper(self, *args):
        return _wdissector.Machine_PrepareStateMapper(self, *args)

    def RunLoopDetection(self, *args):
        return _wdissector.Machine_RunLoopDetection(self, *args)

    def RunStateMapper(self, *args):
        return _wdissector.Machine_RunStateMapper(self, *args)

    def OnTransition(self, transition_cb):
        return _wdissector.Machine_OnTransition(self, transition_cb)

    def OnProcessPseudoHeader(self, evt_callback):
        return _wdissector.Machine_OnProcessPseudoHeader(self, evt_callback)

    def OnLoopDetected(self, evt_callback):
        return _wdissector.Machine_OnLoopDetected(self, evt_callback)

    def GetConfig(self):
        return _wdissector.Machine_GetConfig(self)

    def UpdateConfig(self):
        return _wdissector.Machine_UpdateConfig(self)

    def SetConfig(self, *args):
        return _wdissector.Machine_SetConfig(self, *args)

    def save(self, *args):
        return _wdissector.Machine_save(self, *args)

    def ClearCallbacks(self):
        return _wdissector.Machine_ClearCallbacks(self)

    def get_graph(self):
        return _wdissector.Machine_get_graph(self)

    def SetStateGlobalOffsetPadding(self, value):
        return _wdissector.Machine_SetStateGlobalOffsetPadding(self, value)

    def GetStates(self):
        return _wdissector.Machine_GetStates(self)

    def GetTransitions(self):
        return _wdissector.Machine_GetTransitions(self)

    def GetStateMap(self):
        return _wdissector.Machine_GetStateMap(self)

    def TotalTransitions(self):
        return _wdissector.Machine_TotalTransitions(self)

    def TotalStates(self):
        return _wdissector.Machine_TotalStates(self)

    def TotalStatesLayers(self, sum_offset=0):
        return _wdissector.Machine_TotalStatesLayers(self, sum_offset)

    def LoadModel(self, file_path=None, trim_to_name=False, merge=False, ignore_tx=False):
        return _wdissector.Machine_LoadModel(self, file_path, trim_to_name, merge, ignore_tx)

    def PrintSummary(self):
        return _wdissector.Machine_PrintSummary(self)

    def SaveModel(self, file_path=None):
        return _wdissector.Machine_SaveModel(self, file_path)

    def ResetModel(self):
        return _wdissector.Machine_ResetModel(self)

    def GetCurrentStateName(self):
        return _wdissector.Machine_GetCurrentStateName(self)

    def GetCurrentStateNode(self):
        return _wdissector.Machine_GetCurrentStateNode(self)

    def GetNextStateNames(self, *args):
        return _wdissector.Machine_GetNextStateNames(self, *args)

    def GetCurrentStateNumber(self):
        return _wdissector.Machine_GetCurrentStateNumber(self)

    def GetCurrentStateLayersCount(self):
        return _wdissector.Machine_GetCurrentStateLayersCount(self)

    def GetCurrentStateGlobalOffset(self):
        return _wdissector.Machine_GetCurrentStateGlobalOffset(self)

    def GetPreviousStateName(self):
        return _wdissector.Machine_GetPreviousStateName(self)

    def ResetStats(self):
        return _wdissector.Machine_ResetStats(self)

    def GoToInitialState(self):
        return _wdissector.Machine_GoToInitialState(self)

    def NotifyOnTransition(self):
        return _wdissector.Machine_NotifyOnTransition(self)

    def GetDefaultConfig(self):
        return _wdissector.Machine_GetDefaultConfig(self)

    def ResetConfig(self):
        return _wdissector.Machine_ResetConfig(self)

    def SetLoopDetector(self, en, max_count=5):
        return _wdissector.Machine_SetLoopDetector(self, en, max_count)

    def SetNodesColoring(self, enable):
        return _wdissector.Machine_SetNodesColoring(self, enable)

    def ResetLoopDetector(self):
        return _wdissector.Machine_ResetLoopDetector(self)

    def stop(self):
        return _wdissector.Machine_stop(self)
    __swig_destroy__ = _wdissector.delete_Machine
    __del__ = lambda self: None
Machine_swigregister = _wdissector.Machine_swigregister
Machine_swigregister(Machine)
loop = cvar.loop

IPTABLES = _wdissector.IPTABLES
WD_MODULES_PATH = _wdissector.WD_MODULES_PATH
WD_PYTHON = _wdissector.WD_PYTHON
WD_HANG_DETECTION_TX = _wdissector.WD_HANG_DETECTION_TX
WD_HANG_DETECTION_RX = _wdissector.WD_HANG_DETECTION_RX
WD_HANG_DETECTION_ANY = _wdissector.WD_HANG_DETECTION_ANY
WD_HANG_DETECTION_CUSTOM = _wdissector.WD_HANG_DETECTION_CUSTOM
WD_REPORT_CRASH = _wdissector.WD_REPORT_CRASH
WD_REPORT_TIMEOUT = _wdissector.WD_REPORT_TIMEOUT
class wd_pkt_label(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wd_pkt_label, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wd_pkt_label, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label_status"] = _wdissector.wd_pkt_label_label_status_set
    __swig_getmethods__["label_status"] = _wdissector.wd_pkt_label_label_status_get
    if _newclass:
        label_status = _swig_property(_wdissector.wd_pkt_label_label_status_get, _wdissector.wd_pkt_label_label_status_set)
    __swig_setmethods__["pkt_label"] = _wdissector.wd_pkt_label_pkt_label_set
    __swig_getmethods__["pkt_label"] = _wdissector.wd_pkt_label_pkt_label_get
    if _newclass:
        pkt_label = _swig_property(_wdissector.wd_pkt_label_pkt_label_get, _wdissector.wd_pkt_label_pkt_label_set)
    __swig_setmethods__["pkt_summary"] = _wdissector.wd_pkt_label_pkt_summary_set
    __swig_getmethods__["pkt_summary"] = _wdissector.wd_pkt_label_pkt_summary_get
    if _newclass:
        pkt_summary = _swig_property(_wdissector.wd_pkt_label_pkt_summary_get, _wdissector.wd_pkt_label_pkt_summary_set)
    __swig_setmethods__["pkt_field_name"] = _wdissector.wd_pkt_label_pkt_field_name_set
    __swig_getmethods__["pkt_field_name"] = _wdissector.wd_pkt_label_pkt_field_name_get
    if _newclass:
        pkt_field_name = _swig_property(_wdissector.wd_pkt_label_pkt_field_name_get, _wdissector.wd_pkt_label_pkt_field_name_set)
    __swig_setmethods__["pkt_field_value"] = _wdissector.wd_pkt_label_pkt_field_value_set
    __swig_getmethods__["pkt_field_value"] = _wdissector.wd_pkt_label_pkt_field_value_get
    if _newclass:
        pkt_field_value = _swig_property(_wdissector.wd_pkt_label_pkt_field_value_get, _wdissector.wd_pkt_label_pkt_field_value_set)
    __swig_setmethods__["label_timing_ns"] = _wdissector.wd_pkt_label_label_timing_ns_set
    __swig_getmethods__["label_timing_ns"] = _wdissector.wd_pkt_label_label_timing_ns_get
    if _newclass:
        label_timing_ns = _swig_property(_wdissector.wd_pkt_label_label_timing_ns_get, _wdissector.wd_pkt_label_label_timing_ns_set)

    def __init__(self):
        this = _wdissector.new_wd_pkt_label()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_wd_pkt_label
    __del__ = lambda self: None
wd_pkt_label_swigregister = _wdissector.wd_pkt_label_swigregister
wd_pkt_label_swigregister(wd_pkt_label)
StateMachine = cvar.StateMachine

class pkt_evt_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pkt_evt_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pkt_evt_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["evt"] = _wdissector.pkt_evt_t_evt_set
    __swig_getmethods__["evt"] = _wdissector.pkt_evt_t_evt_get
    if _newclass:
        evt = _swig_property(_wdissector.pkt_evt_t_evt_get, _wdissector.pkt_evt_t_evt_set)
    __swig_setmethods__["pkt_buf"] = _wdissector.pkt_evt_t_pkt_buf_set
    __swig_getmethods__["pkt_buf"] = _wdissector.pkt_evt_t_pkt_buf_get
    if _newclass:
        pkt_buf = _swig_property(_wdissector.pkt_evt_t_pkt_buf_get, _wdissector.pkt_evt_t_pkt_buf_set)
    __swig_setmethods__["pkt_len"] = _wdissector.pkt_evt_t_pkt_len_set
    __swig_getmethods__["pkt_len"] = _wdissector.pkt_evt_t_pkt_len_get
    if _newclass:
        pkt_len = _swig_property(_wdissector.pkt_evt_t_pkt_len_get, _wdissector.pkt_evt_t_pkt_len_set)
    __swig_setmethods__["pkt_dir"] = _wdissector.pkt_evt_t_pkt_dir_set
    __swig_getmethods__["pkt_dir"] = _wdissector.pkt_evt_t_pkt_dir_get
    if _newclass:
        pkt_dir = _swig_property(_wdissector.pkt_evt_t_pkt_dir_get, _wdissector.pkt_evt_t_pkt_dir_set)
    __swig_setmethods__["pkt_summary"] = _wdissector.pkt_evt_t_pkt_summary_set
    __swig_getmethods__["pkt_summary"] = _wdissector.pkt_evt_t_pkt_summary_get
    if _newclass:
        pkt_summary = _swig_property(_wdissector.pkt_evt_t_pkt_summary_get, _wdissector.pkt_evt_t_pkt_summary_set)
    __swig_setmethods__["pkt_save"] = _wdissector.pkt_evt_t_pkt_save_set
    __swig_getmethods__["pkt_save"] = _wdissector.pkt_evt_t_pkt_save_get
    if _newclass:
        pkt_save = _swig_property(_wdissector.pkt_evt_t_pkt_save_get, _wdissector.pkt_evt_t_pkt_save_set)
    __swig_setmethods__["pkt_fuzzed"] = _wdissector.pkt_evt_t_pkt_fuzzed_set
    __swig_getmethods__["pkt_fuzzed"] = _wdissector.pkt_evt_t_pkt_fuzzed_get
    if _newclass:
        pkt_fuzzed = _swig_property(_wdissector.pkt_evt_t_pkt_fuzzed_get, _wdissector.pkt_evt_t_pkt_fuzzed_set)
    __swig_setmethods__["pkt_duplicated"] = _wdissector.pkt_evt_t_pkt_duplicated_set
    __swig_getmethods__["pkt_duplicated"] = _wdissector.pkt_evt_t_pkt_duplicated_get
    if _newclass:
        pkt_duplicated = _swig_property(_wdissector.pkt_evt_t_pkt_duplicated_get, _wdissector.pkt_evt_t_pkt_duplicated_set)
    __swig_setmethods__["pkt_duplicated_id"] = _wdissector.pkt_evt_t_pkt_duplicated_id_set
    __swig_getmethods__["pkt_duplicated_id"] = _wdissector.pkt_evt_t_pkt_duplicated_id_get
    if _newclass:
        pkt_duplicated_id = _swig_property(_wdissector.pkt_evt_t_pkt_duplicated_id_get, _wdissector.pkt_evt_t_pkt_duplicated_id_set)
    __swig_setmethods__["time_latency"] = _wdissector.pkt_evt_t_time_latency_set
    __swig_getmethods__["time_latency"] = _wdissector.pkt_evt_t_time_latency_get
    if _newclass:
        time_latency = _swig_property(_wdissector.pkt_evt_t_time_latency_get, _wdissector.pkt_evt_t_time_latency_set)
    __swig_setmethods__["o_pkt_len"] = _wdissector.pkt_evt_t_o_pkt_len_set
    __swig_getmethods__["o_pkt_len"] = _wdissector.pkt_evt_t_o_pkt_len_get
    if _newclass:
        o_pkt_len = _swig_property(_wdissector.pkt_evt_t_o_pkt_len_get, _wdissector.pkt_evt_t_o_pkt_len_set)
    __swig_setmethods__["o_pkt_buf"] = _wdissector.pkt_evt_t_o_pkt_buf_set
    __swig_getmethods__["o_pkt_buf"] = _wdissector.pkt_evt_t_o_pkt_buf_get
    if _newclass:
        o_pkt_buf = _swig_property(_wdissector.pkt_evt_t_o_pkt_buf_get, _wdissector.pkt_evt_t_o_pkt_buf_set)
    __swig_setmethods__["_pkt_buf"] = _wdissector.pkt_evt_t__pkt_buf_set
    __swig_getmethods__["_pkt_buf"] = _wdissector.pkt_evt_t__pkt_buf_get
    if _newclass:
        _pkt_buf = _swig_property(_wdissector.pkt_evt_t__pkt_buf_get, _wdissector.pkt_evt_t__pkt_buf_set)

    def save_packet(self, pkt, length, offset=0):
        return _wdissector.pkt_evt_t_save_packet(self, pkt, length, offset)

    def set_summary(self, summary_str):
        return _wdissector.pkt_evt_t_set_summary(self, summary_str)

    def __init__(self):
        this = _wdissector.new_pkt_evt_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_pkt_evt_t
    __del__ = lambda self: None
pkt_evt_t_swigregister = _wdissector.pkt_evt_t_swigregister
pkt_evt_t_swigregister(pkt_evt_t)

class WDSignalHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDSignalHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDSignalHandler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.WDSignalHandler_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.WDSignalHandler_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.WDSignalHandler_TAG_get, _wdissector.WDSignalHandler_TAG_set)
    __swig_setmethods__["Exiting"] = _wdissector.WDSignalHandler_Exiting_set
    __swig_getmethods__["Exiting"] = _wdissector.WDSignalHandler_Exiting_get
    if _newclass:
        Exiting = _swig_property(_wdissector.WDSignalHandler_Exiting_get, _wdissector.WDSignalHandler_Exiting_set)

    def init(self):
        return _wdissector.WDSignalHandler_init(self)

    def SetSignalCallback(self, sig, fcn):
        return _wdissector.WDSignalHandler_SetSignalCallback(self, sig, fcn)

    def SetExitCallback(self, fcn):
        return _wdissector.WDSignalHandler_SetExitCallback(self, fcn)

    def __init__(self):
        this = _wdissector.new_WDSignalHandler()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDSignalHandler
    __del__ = lambda self: None
WDSignalHandler_swigregister = _wdissector.WDSignalHandler_swigregister
WDSignalHandler_swigregister(WDSignalHandler)

class WDPacketHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDPacketHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDPacketHandler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.WDPacketHandler_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.WDPacketHandler_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.WDPacketHandler_TAG_get, _wdissector.WDPacketHandler_TAG_set)

    def AddPacketHandler(self, fcn, direction=3, dissection_mode=WD_MODE_NORMAL, realtime=True, proto_name=None):
        return _wdissector.WDPacketHandler_AddPacketHandler(self, fcn, direction, dissection_mode, realtime, proto_name)

    def SetPacketEventsHandler(self, fcn, realtime=False):
        return _wdissector.WDPacketHandler_SetPacketEventsHandler(self, fcn, realtime)

    def PushPacketEvent(self, pkt_evt):
        return _wdissector.WDPacketHandler_PushPacketEvent(self, pkt_evt)

    def Run(self):
        return _wdissector.WDPacketHandler_Run(self)

    def stop(self):
        return _wdissector.WDPacketHandler_stop(self)

    def __init__(self):
        this = _wdissector.new_WDPacketHandler()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDPacketHandler
    __del__ = lambda self: None
WDPacketHandler_swigregister = _wdissector.WDPacketHandler_swigregister
WDPacketHandler_swigregister(WDPacketHandler)

class WDGlobalTimeout(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDGlobalTimeout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDGlobalTimeout, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.WDGlobalTimeout_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.WDGlobalTimeout_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.WDGlobalTimeout_TAG_get, _wdissector.WDGlobalTimeout_TAG_set)
    __swig_setmethods__["TimeoutCounter"] = _wdissector.WDGlobalTimeout_TimeoutCounter_set
    __swig_getmethods__["TimeoutCounter"] = _wdissector.WDGlobalTimeout_TimeoutCounter_get
    if _newclass:
        TimeoutCounter = _swig_property(_wdissector.WDGlobalTimeout_TimeoutCounter_get, _wdissector.WDGlobalTimeout_TimeoutCounter_set)
    __swig_setmethods__["TotalTimeoutCounter"] = _wdissector.WDGlobalTimeout_TotalTimeoutCounter_set
    __swig_getmethods__["TotalTimeoutCounter"] = _wdissector.WDGlobalTimeout_TotalTimeoutCounter_get
    if _newclass:
        TotalTimeoutCounter = _swig_property(_wdissector.WDGlobalTimeout_TotalTimeoutCounter_get, _wdissector.WDGlobalTimeout_TotalTimeoutCounter_set)
    __swig_setmethods__["TimeoutAlreadyTriggered"] = _wdissector.WDGlobalTimeout_TimeoutAlreadyTriggered_set
    __swig_getmethods__["TimeoutAlreadyTriggered"] = _wdissector.WDGlobalTimeout_TimeoutAlreadyTriggered_get
    if _newclass:
        TimeoutAlreadyTriggered = _swig_property(_wdissector.WDGlobalTimeout_TimeoutAlreadyTriggered_get, _wdissector.WDGlobalTimeout_TimeoutAlreadyTriggered_set)

    def init(self, *args):
        return _wdissector.WDGlobalTimeout_init(self, *args)

    def AddTimeoutCallback(self, *args):
        return _wdissector.WDGlobalTimeout_AddTimeoutCallback(self, *args)

    def SetTimeout(self, timeout_ms):
        return _wdissector.WDGlobalTimeout_SetTimeout(self, timeout_ms)

    def StopTimeout(self):
        return _wdissector.WDGlobalTimeout_StopTimeout(self)

    def RestartTimeout(self, clear_timeout_counter=False):
        return _wdissector.WDGlobalTimeout_RestartTimeout(self, clear_timeout_counter)

    def ClearTimeoutCallbacks(self):
        return _wdissector.WDGlobalTimeout_ClearTimeoutCallbacks(self)

    def ClearAllCallbacks(self):
        return _wdissector.WDGlobalTimeout_ClearAllCallbacks(self)

    def stop(self):
        return _wdissector.WDGlobalTimeout_stop(self)

    def __init__(self):
        this = _wdissector.new_WDGlobalTimeout()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDGlobalTimeout
    __del__ = lambda self: None
WDGlobalTimeout_swigregister = _wdissector.WDGlobalTimeout_swigregister
WDGlobalTimeout_swigregister(WDGlobalTimeout)

class WDAnomalyReport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDAnomalyReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDAnomalyReport, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.WDAnomalyReport_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.WDAnomalyReport_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.WDAnomalyReport_TAG_get, _wdissector.WDAnomalyReport_TAG_set)
    __swig_setmethods__["counter_crashes"] = _wdissector.WDAnomalyReport_counter_crashes_set
    __swig_getmethods__["counter_crashes"] = _wdissector.WDAnomalyReport_counter_crashes_get
    if _newclass:
        counter_crashes = _swig_property(_wdissector.WDAnomalyReport_counter_crashes_get, _wdissector.WDAnomalyReport_counter_crashes_set)
    __swig_setmethods__["counter_timeouts"] = _wdissector.WDAnomalyReport_counter_timeouts_set
    __swig_getmethods__["counter_timeouts"] = _wdissector.WDAnomalyReport_counter_timeouts_get
    if _newclass:
        counter_timeouts = _swig_property(_wdissector.WDAnomalyReport_counter_timeouts_get, _wdissector.WDAnomalyReport_counter_timeouts_set)

    def IndicateCrash(self, *args):
        return _wdissector.WDAnomalyReport_IndicateCrash(self, *args)

    def IndicateTimeout(self, *args):
        return _wdissector.WDAnomalyReport_IndicateTimeout(self, *args)

    def IndicateTargetReset(self, *args):
        return _wdissector.WDAnomalyReport_IndicateTargetReset(self, *args)

    def SetReportCallback(self, fcn):
        return _wdissector.WDAnomalyReport_SetReportCallback(self, fcn)

    def ClearTimeoutsCount(self):
        return _wdissector.WDAnomalyReport_ClearTimeoutsCount(self)

    def ClearCrashCount(self):
        return _wdissector.WDAnomalyReport_ClearCrashCount(self)

    def Clear(self):
        return _wdissector.WDAnomalyReport_Clear(self)

    def __init__(self):
        this = _wdissector.new_WDAnomalyReport()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDAnomalyReport
    __del__ = lambda self: None
WDAnomalyReport_swigregister = _wdissector.WDAnomalyReport_swigregister
WDAnomalyReport_swigregister(WDAnomalyReport)

class WDPacketLabelGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDPacketLabelGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDPacketLabelGenerator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wd"] = _wdissector.WDPacketLabelGenerator_wd_set
    __swig_getmethods__["wd"] = _wdissector.WDPacketLabelGenerator_wd_get
    if _newclass:
        wd = _swig_property(_wdissector.WDPacketLabelGenerator_wd_get, _wdissector.WDPacketLabelGenerator_wd_set)

    def init(self, config_file, enable_time_measurement=0):
        return _wdissector.WDPacketLabelGenerator_init(self, config_file, enable_time_measurement)

    def LabelPacket(self, pkt_direction, pkt_buf, pkt_length):
        return _wdissector.WDPacketLabelGenerator_LabelPacket(self, pkt_direction, pkt_buf, pkt_length)

    def __init__(self):
        this = _wdissector.new_WDPacketLabelGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDPacketLabelGenerator
    __del__ = lambda self: None
WDPacketLabelGenerator_swigregister = _wdissector.WDPacketLabelGenerator_swigregister
WDPacketLabelGenerator_swigregister(WDPacketLabelGenerator)

WD_MODULES_MAX_GROUPS = _wdissector.WD_MODULES_MAX_GROUPS
class wd_module_func_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wd_module_func_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wd_module_func_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _wdissector.wd_module_func_t_name_set
    __swig_getmethods__["name"] = _wdissector.wd_module_func_t_name_get
    if _newclass:
        name = _swig_property(_wdissector.wd_module_func_t_name_get, _wdissector.wd_module_func_t_name_set)
    __swig_setmethods__["enable"] = _wdissector.wd_module_func_t_enable_set
    __swig_getmethods__["enable"] = _wdissector.wd_module_func_t_enable_get
    if _newclass:
        enable = _swig_property(_wdissector.wd_module_func_t_enable_get, _wdissector.wd_module_func_t_enable_set)
    __swig_setmethods__["in_group"] = _wdissector.wd_module_func_t_in_group_set
    __swig_getmethods__["in_group"] = _wdissector.wd_module_func_t_in_group_get
    if _newclass:
        in_group = _swig_property(_wdissector.wd_module_func_t_in_group_get, _wdissector.wd_module_func_t_in_group_set)
    __swig_setmethods__["groups"] = _wdissector.wd_module_func_t_groups_set
    __swig_getmethods__["groups"] = _wdissector.wd_module_func_t_groups_get
    if _newclass:
        groups = _swig_property(_wdissector.wd_module_func_t_groups_get, _wdissector.wd_module_func_t_groups_set)
    __swig_setmethods__["require_setup"] = _wdissector.wd_module_func_t_require_setup_set
    __swig_getmethods__["require_setup"] = _wdissector.wd_module_func_t_require_setup_get
    if _newclass:
        require_setup = _swig_property(_wdissector.wd_module_func_t_require_setup_get, _wdissector.wd_module_func_t_require_setup_set)
    __swig_setmethods__["lib"] = _wdissector.wd_module_func_t_lib_set
    __swig_getmethods__["lib"] = _wdissector.wd_module_func_t_lib_get
    if _newclass:
        lib = _swig_property(_wdissector.wd_module_func_t_lib_get, _wdissector.wd_module_func_t_lib_set)
    __swig_setmethods__["ctx"] = _wdissector.wd_module_func_t_ctx_set
    __swig_getmethods__["ctx"] = _wdissector.wd_module_func_t_ctx_get
    if _newclass:
        ctx = _swig_property(_wdissector.wd_module_func_t_ctx_get, _wdissector.wd_module_func_t_ctx_set)
    __swig_setmethods__["module_name"] = _wdissector.wd_module_func_t_module_name_set
    __swig_getmethods__["module_name"] = _wdissector.wd_module_func_t_module_name_get
    if _newclass:
        module_name = _swig_property(_wdissector.wd_module_func_t_module_name_get, _wdissector.wd_module_func_t_module_name_set)
    __swig_setmethods__["setup"] = _wdissector.wd_module_func_t_setup_set
    __swig_getmethods__["setup"] = _wdissector.wd_module_func_t_setup_get
    if _newclass:
        setup = _swig_property(_wdissector.wd_module_func_t_setup_get, _wdissector.wd_module_func_t_setup_set)
    __swig_setmethods__["tx_pre_dissection"] = _wdissector.wd_module_func_t_tx_pre_dissection_set
    __swig_getmethods__["tx_pre_dissection"] = _wdissector.wd_module_func_t_tx_pre_dissection_get
    if _newclass:
        tx_pre_dissection = _swig_property(_wdissector.wd_module_func_t_tx_pre_dissection_get, _wdissector.wd_module_func_t_tx_pre_dissection_set)
    __swig_setmethods__["tx_post_dissection"] = _wdissector.wd_module_func_t_tx_post_dissection_set
    __swig_getmethods__["tx_post_dissection"] = _wdissector.wd_module_func_t_tx_post_dissection_get
    if _newclass:
        tx_post_dissection = _swig_property(_wdissector.wd_module_func_t_tx_post_dissection_get, _wdissector.wd_module_func_t_tx_post_dissection_set)
    __swig_setmethods__["rx_pre_dissection"] = _wdissector.wd_module_func_t_rx_pre_dissection_set
    __swig_getmethods__["rx_pre_dissection"] = _wdissector.wd_module_func_t_rx_pre_dissection_get
    if _newclass:
        rx_pre_dissection = _swig_property(_wdissector.wd_module_func_t_rx_pre_dissection_get, _wdissector.wd_module_func_t_rx_pre_dissection_set)
    __swig_setmethods__["rx_post_dissection"] = _wdissector.wd_module_func_t_rx_post_dissection_set
    __swig_getmethods__["rx_post_dissection"] = _wdissector.wd_module_func_t_rx_post_dissection_get
    if _newclass:
        rx_post_dissection = _swig_property(_wdissector.wd_module_func_t_rx_post_dissection_get, _wdissector.wd_module_func_t_rx_post_dissection_set)

    def configure(self, enable, ctx=None):
        return _wdissector.wd_module_func_t_configure(self, enable, ctx)

    def __init__(self):
        this = _wdissector.new_wd_module_func_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_wd_module_func_t
    __del__ = lambda self: None
wd_module_func_t_swigregister = _wdissector.wd_module_func_t_swigregister
wd_module_func_t_swigregister(wd_module_func_t)

class WDModules(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDModules, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDModules, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.WDModules_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.WDModules_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.WDModules_TAG_get, _wdissector.WDModules_TAG_set)
    __swig_setmethods__["modules_count"] = _wdissector.WDModules_modules_count_set
    __swig_getmethods__["modules_count"] = _wdissector.WDModules_modules_count_get
    if _newclass:
        modules_count = _swig_property(_wdissector.WDModules_modules_count_get, _wdissector.WDModules_modules_count_set)
    __swig_setmethods__["modules_compiled"] = _wdissector.WDModules_modules_compiled_set
    __swig_getmethods__["modules_compiled"] = _wdissector.WDModules_modules_compiled_get
    if _newclass:
        modules_compiled = _swig_property(_wdissector.WDModules_modules_compiled_get, _wdissector.WDModules_modules_compiled_set)
    __swig_setmethods__["modules_loaded"] = _wdissector.WDModules_modules_loaded_set
    __swig_getmethods__["modules_loaded"] = _wdissector.WDModules_modules_loaded_get
    if _newclass:
        modules_loaded = _swig_property(_wdissector.WDModules_modules_loaded_get, _wdissector.WDModules_modules_loaded_set)
    __swig_setmethods__["has_gcc"] = _wdissector.WDModules_has_gcc_set
    __swig_getmethods__["has_gcc"] = _wdissector.WDModules_has_gcc_get
    if _newclass:
        has_gcc = _swig_property(_wdissector.WDModules_has_gcc_get, _wdissector.WDModules_has_gcc_set)
    __swig_setmethods__["modules_map"] = _wdissector.WDModules_modules_map_set
    __swig_getmethods__["modules_map"] = _wdissector.WDModules_modules_map_get
    if _newclass:
        modules_map = _swig_property(_wdissector.WDModules_modules_map_get, _wdissector.WDModules_modules_map_set)
    __swig_setmethods__["modules_ptr"] = _wdissector.WDModules_modules_ptr_set
    __swig_getmethods__["modules_ptr"] = _wdissector.WDModules_modules_ptr_get
    if _newclass:
        modules_ptr = _swig_property(_wdissector.WDModules_modules_ptr_get, _wdissector.WDModules_modules_ptr_set)
    __swig_setmethods__["enabled_modules_ptr"] = _wdissector.WDModules_enabled_modules_ptr_set
    __swig_getmethods__["enabled_modules_ptr"] = _wdissector.WDModules_enabled_modules_ptr_get
    if _newclass:
        enabled_modules_ptr = _swig_property(_wdissector.WDModules_enabled_modules_ptr_get, _wdissector.WDModules_enabled_modules_ptr_set)

    def init(self, *args):
        return _wdissector.WDModules_init(self, *args)

    def SetRequestsHandler(self, *args):
        return _wdissector.WDModules_SetRequestsHandler(self, *args)

    def RunRequestsHandler(self, *args):
        return _wdissector.WDModules_RunRequestsHandler(self, *args)

    def enable_module(self, module_name, enable):
        return _wdissector.WDModules_enable_module(self, module_name, enable)

    def printAvailableModules(self):
        return _wdissector.WDModules_printAvailableModules(self)

    def printAvailableGroups(self):
        return _wdissector.WDModules_printAvailableGroups(self)

    def printAvailablePrefixes(self):
        return _wdissector.WDModules_printAvailablePrefixes(self)

    def DisableAllModules(self):
        return _wdissector.WDModules_DisableAllModules(self)

    def SetStatePtr(self, *args):
        return _wdissector.WDModules_SetStatePtr(self, *args)

    def RegisterGroupPrefix(self, group_number, group_prefix):
        return _wdissector.WDModules_RegisterGroupPrefix(self, group_number, group_prefix)

    def run_tx_pre_dissection(self, *args):
        return _wdissector.WDModules_run_tx_pre_dissection(self, *args)

    def run_tx_post_dissection(self, *args):
        return _wdissector.WDModules_run_tx_post_dissection(self, *args)

    def run_rx_pre_dissection(self, *args):
        return _wdissector.WDModules_run_rx_pre_dissection(self, *args)

    def run_rx_post_dissection(self, *args):
        return _wdissector.WDModules_run_rx_post_dissection(self, *args)

    def AddArgs(self, ParseArgs):
        return _wdissector.WDModules_AddArgs(self, ParseArgs)

    def GetModulesList(self):
        return _wdissector.WDModules_GetModulesList(self)

    def GetModulesListNotInGroup(self):
        return _wdissector.WDModules_GetModulesListNotInGroup(self)

    def GetModulesListInGroup(self):
        return _wdissector.WDModules_GetModulesListInGroup(self)

    def GetPrefixList(self):
        return _wdissector.WDModules_GetPrefixList(self)

    def CheckAllModulesPrefix(self):
        return _wdissector.WDModules_CheckAllModulesPrefix(self)

    def __init__(self):
        this = _wdissector.new_WDModules()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDModules
    __del__ = lambda self: None
WDModules_swigregister = _wdissector.WDModules_swigregister
WDModules_swigregister(WDModules)

class PacketLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketLogger, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.PacketLogger_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.PacketLogger_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.PacketLogger_TAG_get, _wdissector.PacketLogger_TAG_set)
    __swig_setmethods__["logs_count"] = _wdissector.PacketLogger_logs_count_set
    __swig_getmethods__["logs_count"] = _wdissector.PacketLogger_logs_count_get
    if _newclass:
        logs_count = _swig_property(_wdissector.PacketLogger_logs_count_get, _wdissector.PacketLogger_logs_count_set)
    __swig_destroy__ = _wdissector.delete_PacketLogger
    __del__ = lambda self: None

    def init(self, file_path, default_link_type=1, append=False, fifo_file=False, enable_ptr=None):
        return _wdissector.PacketLogger_init(self, file_path, default_link_type, append, fifo_file, enable_ptr)

    def SetLinkType(self, default_link_type):
        return _wdissector.PacketLogger_SetLinkType(self, default_link_type)

    def SetEnablePtr(self, save_enable_var):
        return _wdissector.PacketLogger_SetEnablePtr(self, save_enable_var)

    def Close(self):
        return _wdissector.PacketLogger_Close(self)

    def writeLog(self, msg, error=False):
        return _wdissector.PacketLogger_writeLog(self, msg, error)

    def write(self, *args):
        return _wdissector.PacketLogger_write(self, *args)

    def SetPseudoHeader(self, *args):
        return _wdissector.PacketLogger_SetPseudoHeader(self, *args)

    def ClearPseudoHeader(self):
        return _wdissector.PacketLogger_ClearPseudoHeader(self)

    def SetPostLogCallback(self, fcn):
        return _wdissector.PacketLogger_SetPostLogCallback(self, fcn)

    def SetPreInitCallback(self, fcn):
        return _wdissector.PacketLogger_SetPreInitCallback(self, fcn)

    def stop(self):
        return _wdissector.PacketLogger_stop(self)

    def __init__(self):
        this = _wdissector.new_PacketLogger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
PacketLogger_swigregister = _wdissector.PacketLogger_swigregister
PacketLogger_swigregister(PacketLogger)

class ProcessRunner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessRunner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessRunner, name)
    __repr__ = _swig_repr
    __swig_setmethods__["process_name"] = _wdissector.ProcessRunner_process_name_set
    __swig_getmethods__["process_name"] = _wdissector.ProcessRunner_process_name_get
    if _newclass:
        process_name = _swig_property(_wdissector.ProcessRunner_process_name_get, _wdissector.ProcessRunner_process_name_set)
    __swig_setmethods__["process_args"] = _wdissector.ProcessRunner_process_args_set
    __swig_getmethods__["process_args"] = _wdissector.ProcessRunner_process_args_get
    if _newclass:
        process_args = _swig_property(_wdissector.ProcessRunner_process_args_get, _wdissector.ProcessRunner_process_args_set)
    __swig_setmethods__["process_name_only"] = _wdissector.ProcessRunner_process_name_only_set
    __swig_getmethods__["process_name_only"] = _wdissector.ProcessRunner_process_name_only_get
    if _newclass:
        process_name_only = _swig_property(_wdissector.ProcessRunner_process_name_only_get, _wdissector.ProcessRunner_process_name_only_set)
    __swig_setmethods__["process_id"] = _wdissector.ProcessRunner_process_id_set
    __swig_getmethods__["process_id"] = _wdissector.ProcessRunner_process_id_get
    if _newclass:
        process_id = _swig_property(_wdissector.ProcessRunner_process_id_get, _wdissector.ProcessRunner_process_id_set)
    __swig_setmethods__["process_started"] = _wdissector.ProcessRunner_process_started_set
    __swig_getmethods__["process_started"] = _wdissector.ProcessRunner_process_started_get
    if _newclass:
        process_started = _swig_property(_wdissector.ProcessRunner_process_started_get, _wdissector.ProcessRunner_process_started_set)
    __swig_setmethods__["stopping"] = _wdissector.ProcessRunner_stopping_set
    __swig_getmethods__["stopping"] = _wdissector.ProcessRunner_stopping_get
    if _newclass:
        stopping = _swig_property(_wdissector.ProcessRunner_stopping_get, _wdissector.ProcessRunner_stopping_set)
    __swig_setmethods__["stopped"] = _wdissector.ProcessRunner_stopped_set
    __swig_getmethods__["stopped"] = _wdissector.ProcessRunner_stopped_get
    if _newclass:
        stopped = _swig_property(_wdissector.ProcessRunner_stopped_get, _wdissector.ProcessRunner_stopped_set)
    __swig_setmethods__["change_working_dir"] = _wdissector.ProcessRunner_change_working_dir_set
    __swig_getmethods__["change_working_dir"] = _wdissector.ProcessRunner_change_working_dir_get
    if _newclass:
        change_working_dir = _swig_property(_wdissector.ProcessRunner_change_working_dir_get, _wdissector.ProcessRunner_change_working_dir_set)
    __swig_setmethods__["process_exec_dir"] = _wdissector.ProcessRunner_process_exec_dir_set
    __swig_getmethods__["process_exec_dir"] = _wdissector.ProcessRunner_process_exec_dir_get
    if _newclass:
        process_exec_dir = _swig_property(_wdissector.ProcessRunner_process_exec_dir_get, _wdissector.ProcessRunner_process_exec_dir_set)

    def SetStartCallback(self, fcn):
        return _wdissector.ProcessRunner_SetStartCallback(self, fcn)

    def SetStopCallback(self, fcn):
        return _wdissector.ProcessRunner_SetStopCallback(self, fcn)

    def SetRestartDelayMS(self, delay_ms):
        return _wdissector.ProcessRunner_SetRestartDelayMS(self, delay_ms)

    def WaitProcess(self):
        return _wdissector.ProcessRunner_WaitProcess(self)

    def GetPID(self):
        return _wdissector.ProcessRunner_GetPID(self)

    def stop(self, force=True, wait=False, autorestart=False):
        return _wdissector.ProcessRunner_stop(self, force, wait, autorestart)

    def restart(self, force=False, wait=False, ignore_init_callback=False):
        return _wdissector.ProcessRunner_restart(self, force, wait, ignore_init_callback)

    def setup(self, process_name, args, process_callback, change_working_dir=False, restart_on_exit=False, restart_delay_ms=0):
        return _wdissector.ProcessRunner_setup(self, process_name, args, process_callback, change_working_dir, restart_on_exit, restart_delay_ms)

    def init(self, *args):
        return _wdissector.ProcessRunner_init(self, *args)

    def set_args(self, args):
        return _wdissector.ProcessRunner_set_args(self, args)

    def setDetached(self, en):
        return _wdissector.ProcessRunner_setDetached(self, en)

    def isRunning(self):
        return _wdissector.ProcessRunner_isRunning(self)

    def __init__(self):
        this = _wdissector.new_ProcessRunner()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_ProcessRunner
    __del__ = lambda self: None
ProcessRunner_swigregister = _wdissector.ProcessRunner_swigregister
ProcessRunner_swigregister(ProcessRunner)

MODEM_MANAGER = _wdissector.MODEM_MANAGER
MMCLI = _wdissector.MMCLI
QMICLI = _wdissector.QMICLI
ADB_CLI = _wdissector.ADB_CLI
MM_EVT_MODEM_INITIALIZED = _wdissector.MM_EVT_MODEM_INITIALIZED
MM_EVT_MODEM_GOT_PATH = _wdissector.MM_EVT_MODEM_GOT_PATH
MM_EVT_MODEM_READY = _wdissector.MM_EVT_MODEM_READY
MM_EVT_MODEM_REMOVED = _wdissector.MM_EVT_MODEM_REMOVED
MM_EVT_MODEM_SURPRISE_REMOVED = _wdissector.MM_EVT_MODEM_SURPRISE_REMOVED
MM_EVT_MODEM_INIT_FAILED = _wdissector.MM_EVT_MODEM_INIT_FAILED
MM_EVT_MODEM_RESET_FAILED = _wdissector.MM_EVT_MODEM_RESET_FAILED
MM_EVT_MODEM_DISCONNECTING = _wdissector.MM_EVT_MODEM_DISCONNECTING
MM_EVT_MODEM_CONNECTING = _wdissector.MM_EVT_MODEM_CONNECTING
MM_EVT_MODEM_RESET_REQUESTED = _wdissector.MM_EVT_MODEM_RESET_REQUESTED
MM_EVT_MM_RESTART_REQUESTED = _wdissector.MM_EVT_MM_RESTART_REQUESTED
MM_EVT_MM_STOPPED = _wdissector.MM_EVT_MM_STOPPED
MM_EVT_MM_STARTED = _wdissector.MM_EVT_MM_STARTED
MM_EVT_CLEAN_CONN_START = _wdissector.MM_EVT_CLEAN_CONN_START
MM_EVT_CLEAN_CONN_END = _wdissector.MM_EVT_CLEAN_CONN_END
class SvcModemManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SvcModemManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SvcModemManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.SvcModemManager_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.SvcModemManager_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.SvcModemManager_TAG_get, _wdissector.SvcModemManager_TAG_set)
    __swig_setmethods__["initialized"] = _wdissector.SvcModemManager_initialized_set
    __swig_getmethods__["initialized"] = _wdissector.SvcModemManager_initialized_get
    if _newclass:
        initialized = _swig_property(_wdissector.SvcModemManager_initialized_get, _wdissector.SvcModemManager_initialized_set)
    __swig_setmethods__["ue_modem_initialized"] = _wdissector.SvcModemManager_ue_modem_initialized_set
    __swig_getmethods__["ue_modem_initialized"] = _wdissector.SvcModemManager_ue_modem_initialized_get
    if _newclass:
        ue_modem_initialized = _swig_property(_wdissector.SvcModemManager_ue_modem_initialized_get, _wdissector.SvcModemManager_ue_modem_initialized_set)
    __swig_setmethods__["ue_connected"] = _wdissector.SvcModemManager_ue_connected_set
    __swig_getmethods__["ue_connected"] = _wdissector.SvcModemManager_ue_connected_get
    if _newclass:
        ue_connected = _swig_property(_wdissector.SvcModemManager_ue_connected_get, _wdissector.SvcModemManager_ue_connected_set)
    __swig_setmethods__["ue_dev_attached"] = _wdissector.SvcModemManager_ue_dev_attached_set
    __swig_getmethods__["ue_dev_attached"] = _wdissector.SvcModemManager_ue_dev_attached_get
    if _newclass:
        ue_dev_attached = _swig_property(_wdissector.SvcModemManager_ue_dev_attached_get, _wdissector.SvcModemManager_ue_dev_attached_set)
    __swig_setmethods__["stop_request"] = _wdissector.SvcModemManager_stop_request_set
    __swig_getmethods__["stop_request"] = _wdissector.SvcModemManager_stop_request_get
    if _newclass:
        stop_request = _swig_property(_wdissector.SvcModemManager_stop_request_get, _wdissector.SvcModemManager_stop_request_set)
    __swig_setmethods__["ue_dev_path"] = _wdissector.SvcModemManager_ue_dev_path_set
    __swig_getmethods__["ue_dev_path"] = _wdissector.SvcModemManager_ue_dev_path_get
    if _newclass:
        ue_dev_path = _swig_property(_wdissector.SvcModemManager_ue_dev_path_get, _wdissector.SvcModemManager_ue_dev_path_set)

    def init(self):
        return _wdissector.SvcModemManager_init(self)

    def SetLogCallback(self, fcn):
        return _wdissector.SvcModemManager_SetLogCallback(self, fcn)

    def SetEventsCallback(self, *args):
        return _wdissector.SvcModemManager_SetEventsCallback(self, *args)

    def Restart(self):
        return _wdissector.SvcModemManager_Restart(self)

    def ConfigureModem(self, wait_cmd_to_finish=False):
        return _wdissector.SvcModemManager_ConfigureModem(self, wait_cmd_to_finish)

    def ConfigureADB(self, wait_cmd_to_finish=False):
        return _wdissector.SvcModemManager_ConfigureADB(self, wait_cmd_to_finish)

    def ConfigureADBSync(self):
        return _wdissector.SvcModemManager_ConfigureADBSync(self)

    def ConfigureModemSync(self):
        return _wdissector.SvcModemManager_ConfigureModemSync(self)

    def AutoConnectModem(self):
        return _wdissector.SvcModemManager_AutoConnectModem(self)

    def DisableEvent(self, evt):
        return _wdissector.SvcModemManager_DisableEvent(self, evt)

    def EnableEvent(self, evt):
        return _wdissector.SvcModemManager_EnableEvent(self, evt)

    def ADBConnectBaseStation(self, log_cmd=False):
        return _wdissector.SvcModemManager_ADBConnectBaseStation(self, log_cmd)

    def ADBDisconnectBaseStation(self, log_cmd=False):
        return _wdissector.SvcModemManager_ADBDisconnectBaseStation(self, log_cmd)

    def ADBEnableModemAPN(self, log_cmd=False):
        return _wdissector.SvcModemManager_ADBEnableModemAPN(self, log_cmd)

    def ADBDisableModemAPN(self, log_cmd=False):
        return _wdissector.SvcModemManager_ADBDisableModemAPN(self, log_cmd)

    def ADBResetModem(self, log_cmd=False):
        return _wdissector.SvcModemManager_ADBResetModem(self, log_cmd)

    def ADBCheckConnection(self, log_cmd=False):
        return _wdissector.SvcModemManager_ADBCheckConnection(self, log_cmd)

    def StartModemReconnectionTimeout(self, *args):
        return _wdissector.SvcModemManager_StartModemReconnectionTimeout(self, *args)

    def StopModemReconnectionTimeout(self):
        return _wdissector.SvcModemManager_StopModemReconnectionTimeout(self)

    def RestartModemConnection(self):
        return _wdissector.SvcModemManager_RestartModemConnection(self)

    def StartModemConnectionSync(self):
        return _wdissector.SvcModemManager_StartModemConnectionSync(self)

    def StartModemConnection(self):
        return _wdissector.SvcModemManager_StartModemConnection(self)

    def StopModemConnectionSync(self):
        return _wdissector.SvcModemManager_StopModemConnectionSync(self)

    def StopModemConnection(self):
        return _wdissector.SvcModemManager_StopModemConnection(self)

    def EnableModemAPN(self, wait_cmd=False, delay_ms=0):
        return _wdissector.SvcModemManager_EnableModemAPN(self, wait_cmd, delay_ms)

    def DisableModemAPN(self, wait_cmd=False):
        return _wdissector.SvcModemManager_DisableModemAPN(self, wait_cmd)

    def ResetModemSync(self):
        return _wdissector.SvcModemManager_ResetModemSync(self)

    def ResetModem(self):
        return _wdissector.SvcModemManager_ResetModem(self)

    def IndicateConnection(self):
        return _wdissector.SvcModemManager_IndicateConnection(self)

    def IndicateTargetReset(self):
        return _wdissector.SvcModemManager_IndicateTargetReset(self)

    def IndicateTimeout(self, global_timeout, ext_timeouts_count):
        return _wdissector.SvcModemManager_IndicateTimeout(self, global_timeout, ext_timeouts_count)

    def ATConnectBaseStation(self, wait_cmd_to_finish=False):
        return _wdissector.SvcModemManager_ATConnectBaseStation(self, wait_cmd_to_finish)

    def ATDisconnectBaseStation(self, wait_cmd_to_finish=False):
        return _wdissector.SvcModemManager_ATDisconnectBaseStation(self, wait_cmd_to_finish)

    def ATReconnectBaseStation(self, wait_cmd_to_finish=False):
        return _wdissector.SvcModemManager_ATReconnectBaseStation(self, wait_cmd_to_finish)

    def SendATCommand(self, cmd, wait_cmd_to_finish=False):
        return _wdissector.SvcModemManager_SendATCommand(self, cmd, wait_cmd_to_finish)

    def ModemInitialized(self):
        return _wdissector.SvcModemManager_ModemInitialized(self)

    def SendATCommandGetResponse(self, cmd):
        return _wdissector.SvcModemManager_SendATCommandGetResponse(self, cmd)

    def stop(self):
        return _wdissector.SvcModemManager_stop(self)

    def __init__(self):
        this = _wdissector.new_SvcModemManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_SvcModemManager
    __del__ = lambda self: None
SvcModemManager_swigregister = _wdissector.SvcModemManager_swigregister
SvcModemManager_swigregister(SvcModemManager)

WD_REPORT_SENDER_PATH = _wdissector.WD_REPORT_SENDER_PATH
class SvcReportSender(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SvcReportSender, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SvcReportSender, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.SvcReportSender_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.SvcReportSender_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.SvcReportSender_TAG_get, _wdissector.SvcReportSender_TAG_set)

    def init(self):
        return _wdissector.SvcReportSender_init(self)

    def writeLog(self, msg, is_error):
        return _wdissector.SvcReportSender_writeLog(self, msg, is_error)

    def SendReport(self, report_name, msg, is_error=False, wait=False):
        return _wdissector.SvcReportSender_SendReport(self, report_name, msg, is_error, wait)

    def SendEmail(self, cfg, report_name, msg, wait=False):
        return _wdissector.SvcReportSender_SendEmail(self, cfg, report_name, msg, wait)

    def SendEmailSync(self, cfg, msg_name, msg):
        return _wdissector.SvcReportSender_SendEmailSync(self, cfg, msg_name, msg)

    def __init__(self):
        this = _wdissector.new_SvcReportSender()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_SvcReportSender
    __del__ = lambda self: None
SvcReportSender_swigregister = _wdissector.SvcReportSender_swigregister
SvcReportSender_swigregister(SvcReportSender)

UHUBCTLS = _wdissector.UHUBCTLS
class SvcUSBHubControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SvcUSBHubControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SvcUSBHubControl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.SvcUSBHubControl_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.SvcUSBHubControl_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.SvcUSBHubControl_TAG_get, _wdissector.SvcUSBHubControl_TAG_set)

    def init(self):
        return _wdissector.SvcUSBHubControl_init(self)

    def SetPowerStateON(self, vidpid):
        return _wdissector.SvcUSBHubControl_SetPowerStateON(self, vidpid)

    def SetPowerStateOFF(self, vidpid):
        return _wdissector.SvcUSBHubControl_SetPowerStateOFF(self, vidpid)

    def SetPowerState(self, *args):
        return _wdissector.SvcUSBHubControl_SetPowerState(self, *args)

    def RestartHubPort(self, *args):
        return _wdissector.SvcUSBHubControl_RestartHubPort(self, *args)

    def IndicateTimeout(self, global_timeout, ext_timeouts_count):
        return _wdissector.SvcUSBHubControl_IndicateTimeout(self, global_timeout, ext_timeouts_count)

    def SetPowerStateCallback(self, fcn):
        return _wdissector.SvcUSBHubControl_SetPowerStateCallback(self, fcn)

    def __init__(self):
        this = _wdissector.new_SvcUSBHubControl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_SvcUSBHubControl
    __del__ = lambda self: None
SvcUSBHubControl_swigregister = _wdissector.SvcUSBHubControl_swigregister
SvcUSBHubControl_swigregister(SvcUSBHubControl)

class WDEventQueueInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDEventQueueInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDEventQueueInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.WDEventQueueInt_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.WDEventQueueInt_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.WDEventQueueInt_TAG_get, _wdissector.WDEventQueueInt_TAG_set)

    def PushEvent(self, pkt_evt):
        return _wdissector.WDEventQueueInt_PushEvent(self, pkt_evt)

    def SetEventHandler(self, fcn, realtime=False):
        return _wdissector.WDEventQueueInt_SetEventHandler(self, fcn, realtime)

    def __init__(self):
        this = _wdissector.new_WDEventQueueInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDEventQueueInt
    __del__ = lambda self: None
WDEventQueueInt_swigregister = _wdissector.WDEventQueueInt_swigregister
WDEventQueueInt_swigregister(WDEventQueueInt)

class WDEventQueuePacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDEventQueuePacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WDEventQueuePacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TAG"] = _wdissector.WDEventQueuePacket_TAG_set
    __swig_getmethods__["TAG"] = _wdissector.WDEventQueuePacket_TAG_get
    if _newclass:
        TAG = _swig_property(_wdissector.WDEventQueuePacket_TAG_get, _wdissector.WDEventQueuePacket_TAG_set)

    def PushEvent(self, pkt_evt):
        return _wdissector.WDEventQueuePacket_PushEvent(self, pkt_evt)

    def SetEventHandler(self, fcn, realtime=False):
        return _wdissector.WDEventQueuePacket_SetEventHandler(self, fcn, realtime)

    def __init__(self):
        this = _wdissector.new_WDEventQueuePacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wdissector.delete_WDEventQueuePacket
    __del__ = lambda self: None
WDEventQueuePacket_swigregister = _wdissector.WDEventQueuePacket_swigregister
WDEventQueuePacket_swigregister(WDEventQueuePacket)

class StateMapperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateMapperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateMapperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _wdissector.StateMapperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wdissector.StateMapperVector___nonzero__(self)

    def __bool__(self):
        return _wdissector.StateMapperVector___bool__(self)

    def __len__(self):
        return _wdissector.StateMapperVector___len__(self)

    def __getslice__(self, i, j):
        return _wdissector.StateMapperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _wdissector.StateMapperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _wdissector.StateMapperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _wdissector.StateMapperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _wdissector.StateMapperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _wdissector.StateMapperVector___setitem__(self, *args)

    def pop(self):
        return _wdissector.StateMapperVector_pop(self)

    def append(self, x):
        return _wdissector.StateMapperVector_append(self, x)

    def empty(self):
        return _wdissector.StateMapperVector_empty(self)

    def size(self):
        return _wdissector.StateMapperVector_size(self)

    def swap(self, v):
        return _wdissector.StateMapperVector_swap(self, v)

    def begin(self):
        return _wdissector.StateMapperVector_begin(self)

    def end(self):
        return _wdissector.StateMapperVector_end(self)

    def rbegin(self):
        return _wdissector.StateMapperVector_rbegin(self)

    def rend(self):
        return _wdissector.StateMapperVector_rend(self)

    def clear(self):
        return _wdissector.StateMapperVector_clear(self)

    def get_allocator(self):
        return _wdissector.StateMapperVector_get_allocator(self)

    def pop_back(self):
        return _wdissector.StateMapperVector_pop_back(self)

    def erase(self, *args):
        return _wdissector.StateMapperVector_erase(self, *args)

    def __init__(self, *args):
        this = _wdissector.new_StateMapperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _wdissector.StateMapperVector_push_back(self, x)

    def front(self):
        return _wdissector.StateMapperVector_front(self)

    def back(self):
        return _wdissector.StateMapperVector_back(self)

    def assign(self, n, x):
        return _wdissector.StateMapperVector_assign(self, n, x)

    def resize(self, *args):
        return _wdissector.StateMapperVector_resize(self, *args)

    def insert(self, *args):
        return _wdissector.StateMapperVector_insert(self, *args)

    def reserve(self, n):
        return _wdissector.StateMapperVector_reserve(self, n)

    def capacity(self):
        return _wdissector.StateMapperVector_capacity(self)
    __swig_destroy__ = _wdissector.delete_StateMapperVector
    __del__ = lambda self: None
StateMapperVector_swigregister = _wdissector.StateMapperVector_swigregister
StateMapperVector_swigregister(StateMapperVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _wdissector.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wdissector.StringVector___nonzero__(self)

    def __bool__(self):
        return _wdissector.StringVector___bool__(self)

    def __len__(self):
        return _wdissector.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _wdissector.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _wdissector.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _wdissector.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _wdissector.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _wdissector.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _wdissector.StringVector___setitem__(self, *args)

    def pop(self):
        return _wdissector.StringVector_pop(self)

    def append(self, x):
        return _wdissector.StringVector_append(self, x)

    def empty(self):
        return _wdissector.StringVector_empty(self)

    def size(self):
        return _wdissector.StringVector_size(self)

    def swap(self, v):
        return _wdissector.StringVector_swap(self, v)

    def begin(self):
        return _wdissector.StringVector_begin(self)

    def end(self):
        return _wdissector.StringVector_end(self)

    def rbegin(self):
        return _wdissector.StringVector_rbegin(self)

    def rend(self):
        return _wdissector.StringVector_rend(self)

    def clear(self):
        return _wdissector.StringVector_clear(self)

    def get_allocator(self):
        return _wdissector.StringVector_get_allocator(self)

    def pop_back(self):
        return _wdissector.StringVector_pop_back(self)

    def erase(self, *args):
        return _wdissector.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _wdissector.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _wdissector.StringVector_push_back(self, x)

    def front(self):
        return _wdissector.StringVector_front(self)

    def back(self):
        return _wdissector.StringVector_back(self)

    def assign(self, n, x):
        return _wdissector.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _wdissector.StringVector_resize(self, *args)

    def insert(self, *args):
        return _wdissector.StringVector_insert(self, *args)

    def reserve(self, n):
        return _wdissector.StringVector_reserve(self, n)

    def capacity(self):
        return _wdissector.StringVector_capacity(self)
    __swig_destroy__ = _wdissector.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _wdissector.StringVector_swigregister
StringVector_swigregister(StringVector)

# This file is compatible with both classic and new-style classes.


